<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Register extends MY_Controller {    private $country_code;    private $allow_register = true;    private $user_country;    function __construct() {        parent::__construct();        $this->user_country = FXPP::getUserCountryCode();//        if(in_array($this->user_country, array('US', 'KP', 'MM', 'SD', 'SY'))){//            $this->allow_register = false;//        }        $this->load->library('tank_auth');        $this->lang->load('tank_auth');        $this->lang->load('register');        $this->lang->load('live-account-html');        $this->lang->load('demo-account-html');        $this->country_code = FXPP::getUserCountryCode() or null;//         if(!IPLoc::ForexCalc()){//            redirect('maintenance');//        }    }    public function mail2() {        $email = $this->uri->segment(3, 0);        $email_data = array(            'full_name' => 'test_fullname',            'email' => $email,            'password' => 'testpassword',            'account_number' => 'FM458452168'        );        $config = array(            'mailtype' => 'html'        );        $this->general_model->sendEmail('live-account-html', "ForexMart Team", $email_data['email'], $email_data, $config);    }    public function mail() {        $email_data = array(            'full_name' => 'moniruzzaman',            'email' => 'bug.fxpp@gmail.com',            'password' => '14563333',            'account_number' => 'PM458452168'        );        $subject = "ForexMart MT4 Live Trading Account details";        $config = array(            'mailtype' => 'html'        );        $this->general_model->sendEmail('live-account-html', "ForexMart Team", $email_data['email'], $email_data, $config);        $this->general_model->sendEmail('demo-account-html', "ForexMart Team", $email_data['email'], $email_data, $config);    }    private function autoPassword($nc, $a = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') {        $l = strlen($a) - 1;        $r = '';        while ($nc-- > 0)            $r .= $a{mt_rand(0, $l)};        return $r;    }    // check and create live account to MT4 API    public function webServiceSaveliveAccount($service_data) {        $webservice_config = array(            'server' => 'live_new'        );        $WebService = new WebService($webservice_config);        $tag = '';        if (isset($_SESSION['FXPP6635']) and $_SESSION['FXPP6635'] == 'GJAOV') {            $WebService->open_partner_special_account($service_data);            $tag = 'open_partner_special_account';        } else {            $WebService->open_account_standard($service_data);            $tag = 'open_account_standard';        }        // check account create and account number confirm        if ($WebService->request_status === 'RET_OK') {            $AccountNumber = $WebService->get_result('LogIn');            $TraderPassword = $WebService->get_result('TraderPassword');            $InvestorPassword = $WebService->get_result('InvestorPassword');//                  $RegDate = $WebService->get_result('RegDate');            $WebService4 = new WebService($webservice_config);            $account_info2 = array(                'iLogin' => $AccountNumber            );            $WebService4->request_account_details($account_info2);            if ($WebService4->request_status === 'RET_OK') {                $RegDate = $WebService4->get_result('RegDate');            } else {                $RegDate = FXPP::getServerTime();            }            $webserviceData = array(                'RegDate' => $RegDate,                'AccountNumber' => $AccountNumber,                'TraderPassword' => $TraderPassword,                'InvestorPassword' => $InvestorPassword,                'tag' => $tag,            );            return $webserviceData;        } else {//            if($service_data['email']=='mariaclove07@gmail.com'){//               return $WebService->request_status;//            }else{            return FALSE;//            }        }    }    public function webServiceSaveliveAccount_test($service_data) {        $webservice_config = array(            'server' => 'live_new'        );        $WebService = new WebService($webservice_config);        $tag = '';        if (isset($_SESSION['FXPP6635']) and $_SESSION['FXPP6635'] == 'GJAOV') {            $WebService->open_partner_special_account($service_data);            $tag = 'open_partner_special_account';        } else {            $WebService->open_account_standard($service_data);            $tag = 'open_account_standard';        }        // check account create and account number confirm        if ($WebService->request_status === 'RET_OK') {            $AccountNumber = $WebService->get_result('LogIn');            $TraderPassword = $WebService->get_result('TraderPassword');            $InvestorPassword = $WebService->get_result('InvestorPassword');//                  $RegDate = $WebService->get_result('RegDate');            $WebService4 = new WebService($webservice_config);            $account_info2 = array(                'iLogin' => $AccountNumber            );            $WebService4->request_account_details($account_info2);            if ($WebService4->request_status === 'RET_OK') {                $RegDate = $WebService4->get_result('RegDate');            } else {                $RegDate = FXPP::getServerTime();            }            $webserviceData = array(                'RegDate' => $RegDate,                'AccountNumber' => $AccountNumber,                'TraderPassword' => $TraderPassword,                'InvestorPassword' => $InvestorPassword,                'tag' => $tag,            );            return $webserviceData;        } else {            return $WebService->get_all_result();        }    }    public function saveLiveAccount() {//        if($this->input->is_ajax_request()){        //Execute Your Code        if (strlen($this->session->userdata('email_live')) < 1 || strlen($this->session->userdata('full_name_live')) < 1) {            redirect(FXPP::loc_url('register'));            exit();        }        $_SESSION['tmp_live_full_name'] = $_SESSION['full_name_live'];        $_SESSION['tmp_live_email'] = $_SESSION['email_live'];        $_SESSION['tmp_live_login_type'] = 0;        $this->form_validation->set_rules('street', 'Street', 'trim|required|max_length[128]|xss_clean|callback_character_check');        $this->form_validation->set_rules('city', 'City', 'trim|required|max_length[32]|xss_clean|callback_character_check');        $this->form_validation->set_rules('state', 'State', 'trim|required|max_length[32]|xss_clean|callback_character_check');        $this->form_validation->set_rules('country', 'Country', 'trim|required|xss_clean');        $this->form_validation->set_rules('zip', 'Zip', 'trim|required|max_length[16]|xss_clean|callback_character_check');        $this->form_validation->set_rules('dob', 'Date of Birth', 'trim|required|xss_clean');        if ($this->input->post('auto_generate', true) != 1) {            $this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');            $this->form_validation->set_rules('re_password', 'Re-password', 'trim|required|xss_clean|matches[password]');        }        $this->form_validation->set_rules('country', 'Country', 'trim|required|xss_clean');        $this->form_validation->set_rules('mt_account_set_id', 'Account type', 'trim|required|xss_clean');        $this->form_validation->set_rules('mt_currency_base', 'Account Currency Base', 'trim|required|xss_clean');        $this->form_validation->set_rules('leverage', 'Leverage', 'trim|required|xss_clean');        $error_cond = 'start-out:' . $this->session->userdata('full_name_live') . ' email:' . $this->session->userdata('email_live'); //FXPP-8300        $error_msg = 'start-out:'; //FXPP-8300        $reg_log_data = 'start-out:'; //FXPP-8300        if ($this->form_validation->run() && (FXPP::limit_15reg_24hrs() == false)) {            $country = $this->input->post('country', true);            $illicit_country = unserialize(ILLICIT_COUNTRIES);            $error_cond = 'start:' . $this->session->userdata('full_name_live') . ' email:' . $this->session->userdata('email_live'); //FXPP-8300            $error_msg = 'start:' . $this->session->userdata('full_name_live') . ' email:' . $this->session->userdata('email_live'); //FXPP-8300            $reg_log_data = 'start:' . $this->session->userdata('full_name_live') . ' email:' . $this->session->userdata('email_live'); //FXPP-8300            if (!in_array(strtoupper(trim($country)), $illicit_country)) {                $login_type = 0; //login_type 0 = client user / 1 = partner user                $use_username = $this->config->item('use_username', 'tank_auth');                $email_activation = $this->config->item('email_activation', 'tank_auth');                $password = urldecode($this->form_validation->set_value('password'));                if ($this->input->post('auto_generate', true) == 1) {                    $password = $this->autoPassword(8);                }                $swap_free = $this->input->post('swap_free', true);                $swap_free = empty($swap_free) ? 0 : 1;                $phone_password = FXPP::RandomizeCharacter(7);                if (IPLoc::isChinaIP() || $country == 'CN' || FXPP::html_url() == 'zh') {                    $this->session->set_userdata('isChina', '1');                }                /*  =============== Spread project  setting ================================ */                $speardGroup = $this->input->cookie('forexmart_account_type');  // Here store spread of value using affiliateChecker hook.                $mt_set_id = $this->input->post('mt_account_set_id', true);                $speardGroup = $mt_set_id == 1 ? "refSt" . $speardGroup : "refZe" . $speardGroup;                if ($mt_set_id == 1) {                    $speardGroup = "refSt" . $speardGroup;                } elseif ($mt_set_id == 2) {                    $speardGroup = "refZe" . $speardGroup;                } elseif ($mt_set_id == 4) {                    $speardGroup = "refStC" . $speardGroup;  // Macro account type                }                if (!$this->general_model->getGroupSpard($speardGroup)) {                    $groupCurrency = $this->general_model->getGroupCurrency((int) $mt_set_id, $this->input->post('mt_currency_base', true), $swap_free) . '1';                } else {                    $groupCurrency = $speardGroup;                }                $error_cond = 'a1'; //FXPP-8300                // affiliate referrral get                $input_affiliate_code = $this->input->post('affiliate_code', true);                if ($input_affiliate_code != '') {                    $affiliate_code_logs = self::getAffiliateLogs($input_affiliate_code);                    $affiliate_referral_codes = ':' . str_replace('-', ':', $affiliate_code_logs);//                        $comment =  $this->input->ip_address().$affiliate_referral_codes;                    $error_cond = 'a2'; //FXPP-8300                }else{                        if (strpos($groupCurrency, '-cn') !== false) {                            $input_affiliate_code ='EILQY'; //FXPP-8533                        }                }                $comment = $this->input->ip_address();                // webserive registration require data                $service_data = array(                    'address' => $this->input->post('street', true),                    'city' => $this->input->post('city', true),                    'country' => $this->general_model->getCountries($this->input->post('country', true)),                    'email' => $this->session->userdata('email_live'),                    'group' => $groupCurrency,                    'leverage' => count($ex_leverage = explode(":", $this->input->post('leverage', true))) > 1 ? $ex_leverage[1] : $this->input->post('leverage', true),                    'name' => $this->session->userdata('full_name_live'),                    'phone_number' => $this->input->post('phone', true),                    'state' => $this->input->post('state', true),                    'zip_code' => $this->input->post('zip', true),                    'phone_password' => $phone_password,                    'comment' => $comment                );                if ($webserviceData = $this->webServiceSaveliveAccount($service_data)) {                    $user_inser_data = $this->tank_auth->create_user(                            $use_username ? $this->form_validation->set_value('username') : '', $this->session->userdata('email_live'), $password, $email_activation, 1, $login_type);                    $user_id = $user_inser_data['user_id'];                    $user_data = array('user_id' => $user_id,);                    $this->session->set_userdata($user_data);                    $error_cond = 'a3'; //FXPP-8300                    $data['random_alpha_string_analytics'] = '';                    $data['random_alpha_string_analytics'] = 'z42esbsn4yqu2p';                    $data['save_hash'] = array(                        'first_login_hash' => $data['random_alpha_string_analytics'],                        'first_login_stat' => 1,                        'registration_location' => 1                    );                    $this->general_model->update('users', 'id', $user_id, $data['save_hash']);                    $user_data = array('analytic_hash' => $data['random_alpha_string_analytics'],);                    $this->session->set_userdata($user_data);                    $error_cond = 'a4'; //FXPP-8300                    $profile = array(                        'full_name' => $this->session->userdata('full_name_live'),                        'user_id' => $user_id,                        'country' => $this->input->post('country', true),                        'street' => $this->input->post('street', true),                        'city' => $this->input->post('city', true),                        'state' => $this->input->post('state', true),                        'zip' => $this->input->post('zip', true),                        'dob' => $this->input->post('dob', true),                        'dob_back' => $this->input->post('dob', true)                    );                    if ($this->input->post('country', true) == 'PL') {                        $_SESSION['temp_country'] = 'PL';                    }                    $this->general_model->insert('user_profiles', $profile); // Insert into user profile data.                    /*  =============== End Spread project  setting ================================ */                    // track registration link                    $this->load->helpers('url');                    $reg_date_cur = FXPP::getServerTime();                    $reg_link_details = array(                        'registration_link' => current_full_url(),                        'user_id' => $user_id,                        'street' => $this->input->post('street', true),                        'date_created' => date('Y-m-d H:i:s', strtotime($reg_date_cur)),                    );                    $this->general_model->insert('track_registration', $reg_link_details);                    $error_cond = 'a6'; //FXPP-8300                    // Save Affiliate Link                    $generateAffiliateCode = FXPP::GenerateRandomAffiliateCode();                    $affiliate_code_data = array(                        'users_id' => $user_id,                        'affiliate_code' => $generateAffiliateCode                    );                    $this->general_model->insert('users_affiliate_code', $affiliate_code_data);                    $error_cond = 'a7'; //FXPP-8300                    // mt accounts information with webservice return                    //$RegDate = FXPP::getServerTime();                    $mt_account = array(                        'leverage' => $this->input->post('leverage', true),                        'registration_leverage' => $this->input->post('leverage', true),                        'amount' => $this->input->post('amount', true) ? $this->input->post('amount', true) : 0,                        'mt_currency_base' => $this->input->post('mt_currency_base', true),                        'mt_account_set_id' => $this->input->post('mt_account_set_id', true),                        'registration_ip' => $_SERVER['REMOTE_ADDR'],                        'registration_time' => date('Y-m-d H:i:s', strtotime($webserviceData['RegDate'])),                        'user_id' => $user_id,                        'mt_type' => 1,                        'swap_free' => $swap_free,                        'account_number' => $webserviceData['AccountNumber'],                        'trader_password' => $webserviceData['TraderPassword'],                        'investor_password' => $webserviceData['InvestorPassword'],                        'phone_password' => $phone_password,                        'registry_method' => $webserviceData['tag'],                        'group' => $groupCurrency                    );                    $this->general_model->insert('mt_accounts_set', $mt_account);                    $error_cond = 'a8'; //FXPP-8300                    /* MICRO ACCOUNTS */                    if ($mt_set_id == '4') {                        $data_micro = array(                            'micro' => 1                        );                        $this->general_model->update_micro((int) $user_id, $data_micro); //UPDATE MICRO TO 1 in users                    }                    /* END MICRO ACCOUNTS */                    $this->g_m->updatemy($table = "users", "id", $user_id, array('created' => date('Y-m-d H:i:s', strtotime($webserviceData['RegDate']))));                    $error_cond = 'a9'; //FXPP-8300                    $getCookieAffiliate = $this->input->cookie('forexmart_affiliate');                    $forexmart_affiliate = empty($input_affiliate_code) ? $getCookieAffiliate : $input_affiliate_code;                    $error_cond = 'a10'; //FXPP-8300                    if (!empty($forexmart_affiliate)) {                        $this->load->model('account_model');                        $getAccountNumberByAffiliateCode = $this->account_model->getAccountNumberByCode($forexmart_affiliate);                        $AgentAccountNumber = $getAccountNumberByAffiliateCode['account_number'];                        if (!empty($AgentAccountNumber)) {                            $service_data = array(                                'AccountNumber' => $webserviceData['AccountNumber'],                                'AgentAccountNumber' => $AgentAccountNumber                            );                            $webservice_config = array(                                'server' => 'live_new'                            );                            $WebService = new WebService($webservice_config);                            $WebService->SetAccountAgent($service_data);                            if ($WebService->request_status === 'RET_OK') {                                $referral_data = array(                                    'referral_affiliate_code' => $forexmart_affiliate                                );                                $this->account_model->updateUserDetails('users_affiliate_code', 'users_id', $user_id, $referral_data);                            } else {                                $agent_data = array(                                    'user_id' => $user_id,                                    'account_number' => $webserviceData['AccountNumber'],                                    'agent_account_number' => $AgentAccountNumber                                );                                $this->account_model->insertFailedSetAgent($agent_data);                                $error_cond = '$WebService->request_status === RET_OK : fails'; //FXPP-8300                                $error_msg = $WebService->request_status . ': fail to set agent through SetAccountAgent : DATA PASSED:' . json_encode($service_data); //FXPP-8300                            }                        } else {                            $error_cond = '!empty($AgentAccountNumber) : fails'; //FXPP-8300                            $error_msg = $forexmart_affiliate . 'empty AgentAccountNumber'; //FXPP-8300                        }                    }                    $error_cond = 'a11'; //FXPP-8300                    // Invite friend status update                    $this->load->model('invite_model');                    $email_user = $this->session->userdata('email_live');                    $inv_ref = $forexmart_affiliate;                    // $ref_code = $this->invite_model->getInvitedAffiliateCode($email_user);                    $ref_code = $this->invite_model->getInvitedRefCode($email_user, $user_id);                    $tbl_code = 'ref_number';                    $tbl_email = 'email';                    $invite_data = array(                        'status' => 8,                        'user_id_after_registration' => $user_id                    );                    $error_cond = 'a12'; //FXPP-8300                    if ($inv_ref == $ref_code) {                        $this->invite_model->updateInviteDetails('invite_friends', $inv_ref, $tbl_code, $email_user, $tbl_email, $invite_data);                    }                    // end invite friend status update                    $trading_experience = array(                        'investment_knowledge' => $this->input->post('investment_knowledge', true),                        'risk' => $this->input->post('risk', true),                        'experience' => $this->input->post('experience', true),                        'user_id' => $user_id,                        'technical_analysis' => $this->input->post('technical_analysis', true),                        'trade_duration' => $this->input->post('trade_duration', true),                    );                    $this->general_model->insert('trading_experience', $trading_experience);                    $error_cond = 'a13'; //FXPP-8300                    $contacts_data = array(                        'phone1' => $this->input->post('phone', true),                        'user_id' => $user_id                    );                    $this->general_model->insert('contacts', $contacts_data);                    $error_cond = 'a14'; //FXPP-8300                    // send email  to user email                    $email_data = array(                        'full_name' => $this->session->userdata('full_name_live'),                        'email' => $this->session->userdata('email_live'),                        'password' => $password,                        'account_number' => $mt_account['account_number'],                        'trader_password' => $mt_account['trader_password'],                        'investor_password' => $mt_account['investor_password'],                        'phone_password' => $mt_account['phone_password'],                    );                    $subject = lang('liv_acc_htm_00'); //"ForexMart MT4 Live Trading Account details";                    $config = array(                        'mailtype' => 'html'                    );                    $isSendSuccess = $this->general_model->sendEmail('live-account-html', $subject, $email_data['email'], $email_data, $config);                    $error_cond = 'a15'; //FXPP-8300                    if ($isSendSuccess) {                        unset($_SESSION['ru_ctm_links']);                        unset($_SESSION['FXPP6635']);                        //Create Periodic Mailer                        $fullname = $this->session->userdata('full_name_live');                        $email = $this->session->userdata('email_live');                        FXPP::createPeriodicMailer($email, $fullname);                    }                    $error_cond = 'a16'; //FXPP-8300                    /* FXPP-6539 Allow accounts to be credited with NDB without the need for verification in FXPP *///                    if(IPLoc::Office_for_NDB()){                    FXPP::activate_trading_API($user_id, $webserviceData['AccountNumber']);//                    }                    /* FXPP-6539 Allow accounts to be credited with NDB without the need for verification in FXPP */                    $this->dailyCountryReport($user_id); // sent real time to the email groups                    $this->output->set_content_type('application/json')->set_output(json_encode(array('success' => true, 'error' => '')));                    $error_cond = 'a17=' . json_encode(array('success' => true, 'error' => '')); //FXPP-8300                } else {                    $reg_log_data = $service_data . $this->input->ip_address() . $affiliate_referral_codes;                    ; //FXPP-8300                    $error_cond = '$webserviceData = $this->webServiceSaveliveAccount($service_data) : fails'; //FXPP-8300                    $webserviceData = $this->webServiceSaveliveAccount_test($service_data);                    $error_msg = $webserviceData; //FXPP-8300                    if (IPLoc::Office()) {                        $this->output->set_content_type('application/json')->set_output(json_encode(array('success' => false, 'error' => $webserviceData)));                    } else {                        $this->output->set_content_type('application/json')->set_output(json_encode(array('success' => false, 'error' => 'Oops, something went wrong, Please try again in a few minutes.')));                    }                }            } else {                $reg_log_data = '$illicit_country=' . $illicit_country; //FXPP-8300                $error_cond = '!in_array(strtoupper(trim($country)), $illicit_country) : fails'; //FXPP-8300                $error_msg = strtoupper(trim($country)) . ' error:Country is not currently available. Try it again.'; //FXPP-8300                $this->output->set_content_type('application/json')->set_output(json_encode(array('success' => false, 'error' => 'Country is not currently available. Try it again.')));            }            //FXPP-8300            $reg_log = array(                'data' => json_encode($reg_log_data),                'error_condition' => $error_cond,                'error_msg' => json_encode($error_msg),                'registration_url' => current_full_url(),                'date' => FXPP::getServerTime(),                'ip_address' => $_SERVER['REMOTE_ADDR'],            );            $this->general_model->insertRegLog($reg_log);            //FXPP-8300        } else {            if (FXPP::limit_15reg_24hrs() == true) {                //FXPP-8300                $reg_log = array(                    'data' => json_encode($reg_log_data),                    'error_condition' => $error_cond,                    'error_msg' => 'You have reached the limit allowed in the registration of accounts.',                    'registration_url' => current_full_url(),                    'date' => FXPP::getServerTime(),                    'ip_address' => $_SERVER['REMOTE_ADDR'],                );                $this->general_model->insertRegLog($reg_log);                //FXPP-8300                $this->output->set_content_type('application/json')->set_output(json_encode(array('registration_limit' => true, 'success' => false, 'error' => 'You have reached the limit allowed in the registration of accounts.')));            } else {                //FXPP-8300                $reg_log = array(                    'data' => json_encode(validation_errors()),                    'error_condition' => $error_cond,                    'error_msg' => 'validation error=' . json_encode(array('success' => false, 'error' => validation_errors())),                    'registration_url' => current_full_url(),                    'date' => FXPP::getServerTime(),                    'ip_address' => $_SERVER['REMOTE_ADDR'],                );                $this->general_model->insertRegLog($reg_log);                //FXPP-8300                $this->output->set_content_type('application/json')->set_output(json_encode(array('success' => false, 'error' => validation_errors())));            }//            echo json_encode(validation_errors());        }        // }    }    public function index() {        error_reporting(E_ALL);        ini_set('display_errors', 1);//        if(!IPLoc::ForexCalc()){//            redirect('maintenance');//        }        $get_id = $this->input->get('id', TRUE);        switch ($get_id) {            case 'ru_posting':                $_SESSION['ru_ctm_links'] = 'ru_posting';                break;            case 'GJAOV':                $_SESSION['FXPP6635'] = $get_id;                break;            default:        }        $illicit_country = unserialize(ILLICIT_COUNTRIES);        $data['data']['allowed_country'] = true;        if (in_array(strtoupper(trim($this->country_code)), $illicit_country)) {            $data['data']['allowed_country'] = false;        }        if ($this->allow_register) {            if ($this->uri->segment(3) == "step2" or ( $this->uri->segment(4) == "step2")) {                $user_id = $this->session->userdata('user_id');                $this->form_validation->set_rules('mt_account_set_id', 'Account type', 'required');                $this->form_validation->set_rules('mt_currency_base', 'Account Currency Base', 'required');                $this->form_validation->set_rules('leverage', 'Leverage', 'required');                if ($this->form_validation->run()) {                    if ($this->session->userdata('user_id')) {                        $user = array(                            'affiliate_code' => $this->input->post("affiliate_code", true)                        );                        $this->general_model->update('users', 'id', $user_id, $user);                        // employment_status,industry,source_of_funds,estimated_annual_incomeestimated_net_worth,politically_exposed_person,education_level,user_id                        $employment_detail = array(                            'employment_status' => $this->input->post('employment_status', true),                            'industry' => $this->input->post('industry', true),                            'source_of_funds' => $this->input->post('source_of_funds', true),                            'estimated_annual_income' => $this->input->post('estimated_annual_income', true),                            'estimated_net_worth' => $this->input->post('estimated_net_worth', true),                            'politically_exposed_person' => $this->input->post('politically_exposed_person', true),                            'education_level' => $this->input->post('education_level', true),                            'us_resident' => $this->input->post('us_resident', true),                            'us_citizen' => $this->input->post('us_citizen', true),                            'user_id' => $user_id                        );                        $this->general_model->insert('employment_details', $employment_detail);                        // Registration Upload Documents                        $this->load->helper(array('form', 'url'));                        $array_file = array('0', '1', '2');//                            foreach ($array_file as $key => $a) {//                                $i = $key;//                                if (!empty($_FILES['filename']['name'][$i])) {//                                    $_FILES['userfile']['name'] = $_FILES['filename']['name'][$i];//                                    $_FILES['userfile']['type'] = strtolower($_FILES['filename']['type'][$i]);//                                    $_FILES['userfile']['tmp_name'] = $_FILES['filename']['tmp_name'][$i];//                                    $_FILES['userfile']['error'] = $_FILES['filename']['error'][$i];//                                    $_FILES['userfile']['size'] = $_FILES['filename']['size'][$i];////                                    $config['file_name'] = sha1($_FILES['userfile']['name'][$i]);////                                    $config['file_name']=  hash('sha256',$_FILES['userfile']['name'][$i]);//                                    $config['file_name']=  hash('sha512',$_FILES['userfile']['name'][$i]);//                                    $config['file_name']=  hash('sha384 ',$_FILES['userfile']['name'][$i]); // march 3 2016 change////                            $config['upload_path'] = './assets/user_docs';//                            $config['upload_path'] = '/var/www/html/my.forexmart.com/assets/user_docs/';//                                    $config['upload_path'] =   $config['upload_path'] = '/var/www/svn1/assets/user_docs/';;////                                    $config['allowed_types'] = 'gif|JPG|JPEG|jpg|jpeg|png|bmp|pdf';////                                    $config['max_size'] = '10000';//                                    $config['max_width'] = '0';//                                    $config['max_height'] = '0';//                                    $config['overwrite'] = FALSE;//                                    $this->load->library('upload', $config);////                                                         Alternately you can set preferences by calling the ``initialize()`` method. Useful if you auto-load the class://                                    $this->upload->initialize($config);//                                    if ($this->upload->do_upload()) {//                                        $uploadData = $this->upload->data();//                                        $updData = array(//                                            'user_id' => $user_id,//                                            'doc_type' => $i,//                                            'file_name' => $uploadData['file_name'],//                                            'client_name' => $uploadData['client_name']//                                        );//                                        $this->general_model->insert('user_documents', $updData);//                                    }else{////                                        $config = array(//                                            'mailtype'=> 'html'//                                        );//                                        $email_data = array(//                                            'full_name' => 'test test',//                                            'email' =>'bug.fxpp@gmail.com',//                                            'password'=> '14563333',//                                            'account_number' => $this->upload->display_errors()//                                        );//                                        $this->general_model->sendEmail('live-account-html', "ForexMart Team", 'trowabarton00005@gmail.com', $email_data,$config);////                                    }//                                }//                            }                        // Save Affiliate Link//                            $input_affiliate_code = $this->input->post('affiliate_code');//                            $forexmart_affiliate = $this->input->cookie('forexmart_affiliate');////                            $affiliate_code = empty($input_affiliate_code) ? $forexmart_affiliate : $input_affiliate_code;////                            if(!empty($affiliate_code)){//                                $this->load->model('account_model');////                                $getAccountNumberByAffiliateCode = $this->account_model->getAccountNumberByCode($forexmart_affiliate);//                                $AgentAccountNumber = $getAccountNumberByAffiliateCode['account_number'];////                                if(!empty($AgentAccountNumber)){//                                    $getAccountsByUserId = $this->account_model->getAccountsByUserId($user_id);//                                    $account_number = $getAccountsByUserId[0]['account_number'];////                                    $service_data = array(//                                        'AccountNumber' => $account_number,//                                        'AgentAccountNumber' => $AgentAccountNumber//                                    );//                                    $webservice_config = array(//                                        'server' => 'live_new'//                                    );//                                    $WebService = new WebService($webservice_config);//                                    $WebService->SetAccountAgent($service_data);//                                    if( $WebService->request_status === 'RET_OK' ) {//                                        $referral_data = array(//                                            'referral_affiliate_code' => $affiliate_code//                                        );//                                        $this->account_model->updateUserDetails('users_affiliate_code', 'users_id', $user_id, $referral_data);//                                    }//                                }//                                $cookie = array(//                                    'name'   => 'affiliate',//                                    'value'  => '',//                                    'expire' => '',//                                    'domain' => '.forexmart.com',//                                    'secure' => true,//                                    'path'   => '/',//                                    'prefix' => '',//                                    'httponly' => true,//                                );////                                $this->input->set_cookie($cookie,true);//                            }                        // End Affiliate Link                        // Delete the incomplite  register email                        $this->general_model->delete("incomplete_registers", "email", $this->session->userdata('email_live'));                        $isLogged = $this->session->userdata('logged');                        if (isset($isLogged)) {//                                redirect($this->config->item('domain-my') . '/accounts');                            $_SESSION['first_login'] = true;                            redirect(FXPP::my_url('my-account' . '?' . $this->session->userdata('analytic_hash')));                        } else {                            $user_data = array(                                'email' => $this->session->userdata('email_live'),                                'full_name' => $this->session->userdata('full_name_live'),                                'user_id' => $user_id,                                'logged_in' => TRUE,                                'logged' => 1                            );                            $this->session->set_userdata($user_data);                            $_SESSION['first_login'] = true;                            redirect(FXPP::my_url('my-account' . '?' . $this->session->userdata('analytic_hash')));                        }                    }                } else {                    $this->load->model('user_model');                    $user_details = $this->user_model->getFirstUserDetailsByEmail($this->session->userdata('email_live'));                    $trading_experience = explode(',', $user_details['experience']);                    $trading_experience_value = array();                    if (count($trading_experience) > 2) {                        foreach ($trading_experience as $experience) {                            if ($experience) {                                $trading_experience_value[] = true;                            } else {                                $trading_experience_value[] = false;                            }                        }                    } else {                        $trading_experience_value = array(false, false, false);                    }                    $user_details['trading_experience_value'] = $trading_experience_value;                    $data['user_details'] = $user_details;                }                $get_id = $this->input->get('id', TRUE);                $getCode = (isset($get_id)) ? strtok($get_id, '?') : '';                $data['referral_code'] = $getCode;                if (IPLoc::Office()) {                    $data['countries'] = $this->general_model->selectOptionList($this->general_model->getAllCountries_localize(), isset($user_details['country']) ? $user_details['country'] : $this->country_code);                } else {                    $data['countries'] = $this->general_model->selectOptionList($this->general_model->getAllCountries(), isset($user_details['country']) ? $user_details['country'] : $this->country_code);                    //$data['countries'] = $this->general_model->selectOptionList($this->general_model->getCountries(), isset($user_details['country']) ? $user_details['country'] : $this->country_code);                }                                if($this->session->userdata('regacc_type') == 'spreadacc'){                    $data['account_type'] = $this->general_model->selectOptionList($this->general_model->getAccountType(), 2);                    $data['account_currency_base'] = $this->general_model->selectOptionList($this->general_model->getAccountCurrencyBase_v2(), isset($user_details['mt_currency_base']) ? $user_details['mt_currency_base'] : "USD");                }elseif($this->session->userdata('regacc_type') == 'microacc'){                    $data['account_type'] = $this->general_model->selectOptionList($this->general_model->getAccountType(), 4);                    $data['account_currency_base'] = $this->general_model->selectOptionList(array('USD' => 'USD', 'EUR' => 'EUR'), 'USD');                }else{                    $data['account_type'] = $this->general_model->selectOptionList($this->general_model->getAccountType(), isset($user_details['mt_account_set_id']) ? $user_details['mt_account_set_id'] : 1);                    $data['account_currency_base'] = $this->general_model->selectOptionList($this->general_model->getAccountCurrencyBase_v2(), isset($user_details['mt_currency_base']) ? $user_details['mt_currency_base'] : "USD");                }                                if (isset($_SESSION['ru_ctm_links'])) {                    switch ($_SESSION['ru_ctm_links']) {                        case 'ru_posting':                            $data['account_currency_base'] = $this->general_model->selectOptionList(array('RUB' => 'RUR'), "RUR");                            break;                    }                } else {                    #$data['account_currency_base'] = $this->general_model->selectOptionList($this->general_model->getAccountCurrencyBase_v2(), isset($user_details['mt_currency_base']) ? $user_details['mt_currency_base'] : "USD");                }//                if (isset($_SESSION['isMicro']) && $_SESSION['isMicro'] == '1') {//                    $data['account_type'] = $this->general_model->selectOptionList($this->general_model->getAccountType(), 4);//                    $data['account_currency_base'] = $this->general_model->selectOptionList(array('USD' => 'USD', 'EUR' => 'EUR'), 'USD');//                    $data['micro'] = 1;//                    unset($_SESSION['isMicro']);//                }                $user_country = FXPP::getUserCountryCode();                if (strtoupper($user_country) == 'CN' || FXPP::html_url() == 'zh') {                    $data['account_currency_base'] = $this->general_model->selectOptionList(array('USD' => 'USD', 'EUR' => 'EUR', 'CNY' => 'CNY'), "USD");                }                if (in_array(strtoupper($user_country), array('PL'))) {                    $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(null, 100), ($user_details['leverage'] != "") ? $user_details['leverage'] : "1:50");//                    if (IPLoc::Office()) {//                        $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(null, 100), ($user_details['leverage']!="")?$user_details['leverage'] : "1:50");//                    }else{//                        $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(null, 100), isset($user_details['leverage']) ? $user_details['leverage'] : "1:100");//                    }                } else {                    $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(), ($user_details['leverage'] != "") ? $user_details['leverage'] : "1:50");//                    if (IPLoc::Office()) {//                        $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(),($user_details['leverage']!="")?$user_details['leverage'] : "1:50");//                    }else{//                        $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(), isset($user_details['leverage']) ? $user_details['leverage'] : "1:200");//                    }                }                if ($_SESSION['temp_country'] == "PL") {                    $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(null, 100), isset($user_details['leverage']) ? $user_details['leverage'] : "1:100");                }                $data['amount'] = $this->general_model->selectOptionList($this->general_model->getAmount());                $data['employment_status'] = $this->general_model->selectOptionList($this->general_model->getEmploymentStatus(), isset($user_details['employment_status']) ? $user_details['employment_status'] : 0);                $data['industry'] = $this->general_model->selectOptionList($this->general_model->getIndustry(), isset($user_details['industry']) ? $user_details['industry'] : null);                $data['source_of_funds'] = $this->general_model->selectOptionList($this->general_model->getSourceOfFunds());                $data['estimated_annual_income'] = $this->general_model->selectOptionList($this->general_model->getEstimatedAnnualIncome(), isset($user_details['estimated_annual_income']) ? $user_details['estimated_annual_income'] : 3);                $data['estimated_net_worth'] = $this->general_model->selectOptionList($this->general_model->getEstimatedNetWorth(), isset($user_details['estimated_net_worth']) ? $user_details['estimated_net_worth'] : 3);                $data['investment_knowledge'] = $this->general_model->selectOptionList($this->general_model->getInvestmentKnowledge(), isset($user_details['investment_knowledge']) ? $user_details['investment_knowledge'] : 1);                $data['education_level'] = $this->general_model->selectOptionList($this->general_model->getEducationLevel(), isset($user_details['education_level']) ? $user_details['education_level'] : null);                $data['trade_duration'] = $this->general_model->selectOptionList($this->general_model->geTtradeDuration(), isset($user_details['trade_duration']) ? $user_details['trade_duration'] : null);                $data['postal_code'] = FXPP::getVisitorInfo()->postal_code;                $data['calling_code'] = $this->general_model->getCallingCode($this->country_code);                $js = $this->template->Js();                $css = $this->template->Css();                //$data['metadata_description'] = lang('x_reg_dsc');                //$data['data']['metadata_description'] = lang('x_reg_dsc');                $data['data']['metadata_description'] = '';                $data['metadata_keyword'] = lang('x_reg_kew');                $this->template->title(lang('x_reg_tit'))                        ->set_layout('external/main')                        ->append_metadata_css("<link rel='stylesheet' href='" . $css . "/loaders.css'>")                        ->prepend_metadata("                        <script src='" . $js . "jquery.validate.min.js'></script>                        <script src='" . $js . "pwstrength.js'></script>                        <script src='" . $js . "bootbox.min.js'></script>                        ")                        ->build('auth/register_live2', $data);            } else {                $get_id = $this->input->get('id', TRUE);                if (isset($get_id)) {                    $getCode = '?id=' . $get_id;                } else {                    $getCode = '';                }                    $this->form_validation->set_rules('email', lang('x_reg_3'), 'trim|valid_email|required|xss_clean');                //$this->form_validation->set_rules('email', 'Email', 'trim|valid_email|required|max_length[128]|xss_clean|callback_character_check');                $this->form_validation->set_rules('full_name', lang('x_reg_fva'), 'trim|required|max_length[48]|xss_clean|callback_character_check');                $this->form_validation->set_message('is_unique', 'This email is already used.');                if ($this->form_validation->run()) {                   // if(IPLoc::Office()){                        $email = $this->input->post('email', true);                        $incomplete_registers = array(                            'email' => $this->input->post('email', true),                            'full_name' => $this->input->post('full_name', true),                            'resend_code'=> date('his')                        );                        $this->general_model->insert('incomplete_registers', $incomplete_registers);                        if($this->is_valid_email($email)){                            $user_data = array(                                'email_live' => $this->input->post('email', true),                                'full_name_live' => $this->input->post('full_name', true)                            );                            $this->session->set_userdata($user_data);                            redirect(FXPP::loc_url('register/index/step2') . $getCode);                        }else{                            // Only for unverifide email                            $user_data = array(                                'email_live_activation' => $this->input->post('email', true),                            );                            $this->session->set_userdata($user_data);                            if(Fx_mailer::sendVerificationCode($incomplete_registers)){                                redirect(FXPP::loc_url('email-verification').$getCode);                            }else{                                $data['data']['emailVerification'] = "Please input a valid Email.";                            }                        }                                           /* }else{                        // Live Ips                        $user_data = array(                            'email_live' => $this->input->post('email', true),                            'full_name_live' => $this->input->post('full_name', true)                        );                        $this->session->set_userdata($user_data);                        $incomplete_registers = array(                            'email' => $this->input->post('email', true),                            'full_name' => $this->input->post('full_name', true)                        );                        $this->general_model->insert('incomplete_registers', $incomplete_registers);                        redirect(FXPP::loc_url('register/index/step2') . $getCode);                        // End                    }*/                }                $data['data']['form'] = Form_key::InputKey_array();                // $data['data']['metadata_description'] = lang('x_reg_dsc');                $data['data']['metadata_description'] = '';                $data['data']['metadata_keyword'] = lang('x_reg_kew');                $this->template->title(lang('x_reg_tit'))                        ->prepend_metadata("<script src='" . $this->template->Js() . "/jquery.validate.min.js'></script>")                        ->set_layout('external/main')                        ->build('auth/register_live1', $data['data']);            }        } else {            show_404();//            if(in_array($this->user_country, array('ES'))){//                $data['message'] = 'Registration page is temporarily unavailable.';//            }else{//                $data['message'] = 'This page is not available in your country.';//            }//                $this->template->title("ForexMart | Live Trading Account")//                    ->set_layout('external/main')//                    ->build('unavailable', $data);        }    }    public function is_valid_email($email) {        $return = Fx_mailer::validateEmail('notify@forexmart.com', $email);        $emailavg = explode('@', $email);        if ($email == 'aynel@abv.bg' or $email == '576@tuta.io') {            return true;        }        if ($emailavg[1] == 'abv.bg') {            return true;        }        if ($return[$email] == 'bool(true)') {            return true;        } else {            $this->form_validation->set_message('is_valid_email', 'Please input a valid Email.');            return false;        }    }    public function doUploadDocuments($files) {            }    public function passwordCheck() {        $password = urldecode($this->input->post('pass', true));        $this->load->library('Tank_auth');        if ($this->input->post('status', true) == "demo") {            $email = $this->session->userdata('email_demo');        } else {            $email = $this->session->userdata('email_live');        }        if ((strlen($email) > 0) AND ( strlen($password) > 0)) {            if (!is_null($users = $this->users->get_user_by_email($email))) { // login ok                //print_r($users);                //exit();                // Does password match hash in database?                $hasher = new PasswordHash(                        $this->config->item('phpass_hash_strength', 'tank_auth'), $this->config->item('phpass_hash_portable', 'tank_auth'));                foreach ($users as $user) {                    if ($hasher->CheckPassword($password, $user->password)) { // password ok                        echo "true";                        return true;                    }                }            } else { // fail - wrong login                // ob_end_clean();                // echo 'false';            }        }        //echo 'false';        return FALSE;    }    public function saveDemoAccount() {        /* if($this->input->post('auto_generate')!=1){          $this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');          $this->form_validation->set_rules('re_password', 'Re-password', 'trim|required|xss_clean');          } */        $this->form_validation->set_rules('country', 'Country', 'trim|required|xss_clean');        if ($this->form_validation->run()) {            $country = $this->input->post('country', true);            $illicit_country = unserialize(ILLICIT_COUNTRIES);            if (!in_array(strtoupper(trim($country)), $illicit_country)) {                $use_username = $this->config->item('use_username', 'tank_auth');                $email_activation = $this->config->item('email_activation', 'tank_auth');                $login_type = 0; //login_type 0 = client user / 1 = partner user                /* $password =  urldecode($this->form_validation->set_value('password'));                  if($this->input->post('auto_generate')==1)                  {                  $password = $this->autoPassword(8);                  } */                var_dump($this->session->userdata('email_demo'));                $this->db->trans_start();                $user_inser_data = $this->tank_auth->create_user(                        $use_username ? $this->form_validation->set_value('username') : '', $this->session->userdata('email_demo'), '', $email_activation, 0, $login_type);                $user_id = $user_inser_data['user_id'];                // full_name,user_id,country,mt_account_set_id                $profile = array(                    'full_name' => $this->session->userdata('full_name_demo'),                    'user_id' => $user_id,                    'country' => $this->input->post('country', true),                );                $this->general_model->insert('user_profiles', $profile); // Insert into user profile data.                $this->db->trans_complete();                $user_data = array(                    'user_id' => $user_id,                );                $this->session->set_userdata($user_data);                echo json_encode("done");            }        }    }    public function demo() {//        if(!IPLoc::ForexCalc()){//            redirect('maintenance');//        }        if ($this->allow_register) {            if ($this->uri->segment(3) == "step2" or ( $this->uri->segment(4) == "step2")) {                //echo $this->session->userdata('email'); exit();                /* $this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');                  $this->form_validation->set_rules('re_password', 'Re-password', 'trim|required|xss_clean'); */                $this->form_validation->set_rules('country', 'Country', 'trim|required|xss_clean');                $this->form_validation->set_rules('account_type', 'Account type', 'trim|required|xss_clean');                $this->form_validation->set_rules('currency', 'Account Currency Base', 'trim|required|xss_clean');                $this->form_validation->set_rules('leverage', 'Leverage', 'trim|required|xss_clean');                $this->form_validation->set_rules('amount', 'Amount', 'trim|required|xss_clean|callback_character_check');                if ($this->form_validation->run()) {                    $country = $this->input->post('country', true);                    $illicit_country = unserialize(ILLICIT_COUNTRIES);                    if (!in_array(strtoupper(trim($country)), $illicit_country)) {                        //                        var_dump('should be step3');die();                        $user_id = $this->session->userdata('user_id');                        $webservice_config = array(                            'server' => 'demo_new'                        );                        $WebService = new WebService($webservice_config);                        $groupCurrency = $this->general_model->getDemoGroupCurrency((int) $this->input->post('account_type', true), $this->input->post('currency', true));                        $account_info = array(                            'address' => '',                            'city' => '',                            'country' => $this->general_model->getCountries($this->input->post('country', true)),                            'email' => $this->session->userdata('email_demo'),                            'group' => $groupCurrency,                            'leverage' => count($ex_leverage = explode(":", $this->input->post('leverage', true))) > 1 ? $ex_leverage[1] : $this->input->post('leverage', true),                            'name' => $this->session->userdata('full_name_demo'),                            'phone_number' => '',                            'state' => '',                            'zip_code' => '',                            'phone_password' => ''                        );                        $WebService->open_account_standard($account_info);                        if ($WebService->request_status === 'RET_OK') {                            $AccountNumber = $WebService->get_result('LogIn');                            $TraderPassword = $WebService->get_result('TraderPassword');                            $InvestorPassword = $WebService->get_result('InvestorPassword');//                                $RegDate = $WebService->get_result('RegDate');                            $RegDate = FXPP::getServerTime();                            $this->db->trans_start();                            $mt_account = array(                                'leverage' => $this->input->post('leverage', true),                                'amount' => $this->input->post('amount', true),                                'mt_currency_base' => $this->input->post('currency', true),                                'mt_account_set_id' => $this->input->post('account_type', true),                                'registration_ip' => $_SERVER['REMOTE_ADDR'],                                'registration_time' => date('Y-m-d H:i:s', strtotime($RegDate)),                                'user_id' => $user_id,                                'mt_type' => 0,                                'account_number' => $AccountNumber,                                'trader_password' => $TraderPassword,                                'investor_password' => $InvestorPassword                            );                            $this->general_model->insert('mt_accounts_set', $mt_account);                            // track registration link                            $this->load->helpers('url');                            $reg_link_details = array(                                'registration_link' => current_full_url(),                                'user_id' => $user_id,                                'additional' => json_encode(array('Full Name' => $account_info['name'], 'Email' => $account_info['email'], 'Country' => $account_info['country'])),                                'date_created' => date('Y-m-d H:i:s', strtotime($RegDate)),                            );                            $this->general_model->insert('track_registration', $reg_link_details);                            $WebService2 = new WebService($webservice_config);                            $WebService2->update_demo_deposit_balance($AccountNumber, $this->input->post('amount', true));                            $trading_experience = array(                                'user_id' => $user_id,                                'technical_analysis' => $this->input->post('technical_analysis', true),                            );                            $this->general_model->insert('trading_experience', $trading_experience);                            $contacts_data = array(                                'phone1' => $this->input->post('phone', true),                                'user_id' => $user_id                            );                            $this->general_model->insert('contacts', $contacts_data);                            $this->db->trans_complete();                            // send email                            $email_data = array(                                'full_name' => $this->session->userdata('full_name_demo'),                                'email' => $this->session->userdata('email_demo'),                                'password' => $this->input->post('password', true),                                'account_number' => $mt_account['account_number'],                                'trader_password' => $mt_account['trader_password'],                                'investor_password' => $mt_account['investor_password']                            );                            $subject = lang('dem_acc_htm_01');                            $config = array(                                'mailtype' => 'html'                            );                            $this->general_model->sendEmail('demo-account-html', $subject, $email_data['email'], $email_data, $config);                            // $this->dailyCountryReport($user_id); // sent real time to the email groups                            // Delete the incomplite  register email                            $this->general_model->delete("incomplete_registers", "email", $email_data['email']);                            $this->load->library('IPLoc');                            $this->load->library('Time');                            $this->tank_auth->logout();                            if ($this->session->userdata('logged')) {                                //header('Location: ' . $this->config->item('domain-my') . '/accounts');                                // $data['metadata_description'] = lang('rede_dsc');                                $data['metadata_description'] = '';                                $mt_account['metadata_keyword'] = lang('rede_kew');                                $this->template->title(lang('rede_tit'))                                        ->set_layout('external/main')                                        ->build('auth/message_demo', $mt_account);                            } else {                                /* $user_data = array(                                  'email' => $this->session->userdata('email_demo'),                                  'full_name' => $this->session->userdata('full_name_demo'),                                  'user_id' => $user_id,                                  'logged_in' => TRUE,                                  'logged' => 1                                  );                                  $this->session->set_userdata($user_data); */                                //redirect('accounts');                                //header('Location: ' . $this->config->item('domain-my') . '/accounts');                                // $data['metadata_description'] = lang('rede_dsc');                                $data['metadata_description'] = '';                                $mt_account['metadata_keyword'] = lang('rede_kew');                                $this->template->title(lang('rede_tit'))                                        ->set_layout('external/main')                                        ->build('auth/message_demo', $mt_account);                            }                        } else {                            if (IPLoc::Office()) {                                $data['countries'] = $this->general_model->selectOptionList($this->general_model->getAllCountries_localize(), $this->country_code);                            } else {                                $data['countries'] = $this->general_model->selectOptionList($this->general_model->getAllCountries(), $this->country_code);//                                    $data['countries'] = $this->general_model->selectOptionList($this->general_model->getCountries(),$this->country_code);                            }                            $data['account_type'] = $this->general_model->selectOptionList($this->general_model->getAccountType(), 1);                            $data['account_currency_base'] = $this->general_model->selectOptionList($this->general_model->getAccountCurrencyBase_v2(), 'EUR');                            $user_country = FXPP::getUserCountryCode();                            if (in_array(strtoupper($user_country), array('PL'))) {                                $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(null, 100), "1:100");                            } else {                                $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(), "1:50"); //FXPP-6509 changed from 1:200                            }                            $data['amount'] = $this->general_model->selectOptionList($this->general_model->getAmount(), '50000');                            $data['country_code'] = $this->country_code;                            $data['calling_code'] = $this->general_model->getCallingCode($this->country_code);                            // $data['metadata_description'] = lang('rede_dsc');                            $data['metadata_description'] = '';                            $data['metadata_keyword'] = lang('rede_kew');                            $this->template->title(lang('rede_tit'))                                    ->set_layout('external/main')                                    ->prepend_metadata("                                             <script src='" . $this->template->Js() . "/pwstrength.js'></script>                                            <script src='" . $this->template->Js() . "/jquery.validate.min.js'></script>                                ")                                    ->build('auth/register_demo2', $data);                        }                    }                } else {                    if (IPLoc::Office()) {                        $data['countries'] = $this->general_model->selectOptionList($this->general_model->getAllCountries_localize(), $this->country_code);                    } else {                        $data['countries'] = $this->general_model->selectOptionList($this->general_model->getAllCountries(), $this->country_code);//                            $data['countries'] = $this->general_model->selectOptionList($this->general_model->getCountries(),$this->country_code);                    }                    $data['account_type'] = $this->general_model->selectOptionList($this->general_model->getAccountType(), 1);                    $data['account_currency_base'] = $this->general_model->selectOptionList($this->general_model->getAccountCurrencyBase_v2(), 'EUR');                    $user_country = FXPP::getUserCountryCode();                    if (in_array(strtoupper($user_country), array('PL'))) {                        $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(null, 100), "1:100");                    } else {                        $data['leverage'] = $this->general_model->selectOptionList($this->general_model->getLeverage(), "1:50"); //FXPP-6509 changed from 1:200                    }                    $data['amount'] = $this->general_model->selectOptionList($this->general_model->getAmount(), '50000');                    $data['country_code'] = $this->country_code;                    $data['calling_code'] = $this->general_model->getCallingCode($this->country_code);                    // $data['metadata_description'] = lang('rede_dsc');                    $data['metadata_description'] = '';                    $data['metadata_keyword'] = lang('rede_kew');                    $this->template->title(lang('rede_tit'))                            ->set_layout('external/main')                            ->prepend_metadata("                                <script src='" . $this->template->Js() . "/pwstrength.js'></script>                                <script src='" . $this->template->Js() . "/jquery.validate.min.js'></script>                                ")                            ->build('auth/register_demo2', $data);                }            } else {                $this->form_validation->set_rules('email', 'Email', 'trim|valid_email|required|max_length[48]|xss_clean|callback_character_check');                $this->form_validation->set_rules('full_name', 'Full name', 'trim|required|max_length[128]|xss_clean|callback_character_check');                $this->form_validation->set_message('is_unique', 'This email is already used.');                if ($this->form_validation->run()) {                    $user_data = array(                        'email_demo' => $this->input->post('email', true),                        'full_name_demo' => $this->input->post('full_name', true)                    );                    $this->session->set_userdata($user_data);                    $incomplete_registers = array(                        'email' => $this->input->post('email', true),                        'full_name' => $this->input->post('full_name', true)                    );                    $this->general_model->insert('incomplete_registers', $incomplete_registers);                    redirect(FXPP::www_url('register/demo/step2'));                }                $data['form'] = Form_key::InputKey_array();                // $data['metadata_description'] = lang('rede_dsc');                $data['metadata_description'] = '';                $data['metadata_keyword'] = lang('rede_kew');                $this->template->title(lang('rede_tit'))                        ->prepend_metadata("                                <script src='" . $this->template->Js() . "/jquery.validate.min.js'></script>                            ")                        ->set_layout('external/main')                        ->build('auth/register_demo1', $data);            }        } else {            show_404();        }    }    public function upload_test() {        error_reporting(E_ALL);        ini_set('display_errors', 1);        if (!empty($_FILES['filename']['name'])) {            $this->load->helper(array('form', 'url'));            $cpt = count($_FILES['filename']['name']);            for ($i = 0; $i < $cpt; $i++) {                if (!empty($_FILES['filename']['name'][$i])) {                    $_FILES['userfile']['name'] = $_FILES['filename']['name'][$i];                    $_FILES['userfile']['type'] = strtolower($_FILES['filename']['type'][$i]);                    $_FILES['userfile']['tmp_name'] = $_FILES['filename']['tmp_name'][$i];                    $_FILES['userfile']['error'] = $_FILES['filename']['error'][$i];                    $_FILES['userfile']['size'] = $_FILES['filename']['size'][$i];                    $config['file_name'] = sha1($_FILES['userfile']['name'][$i]);//                    $config['upload_path'] = './assets/user_docs';                    $config['upload_path'] = '/var/www/svn1/assets/user_docs/';                    $config['allowed_types'] = 'JPEG|JPG|jpg|jpeg|png|gif';                    $config['max_size'] = '10000';                    $config['max_width'] = '0';                    $config['max_height'] = '0';                    $config['overwrite'] = false;                    $this->load->library('upload', $config);                    //                     Alternately you can set preferences by calling the ``initialize()`` method. Useful if you auto-load the class:                    $this->upload->initialize($config);                    if ($this->upload->do_upload()) {                        $uploadData = $this->upload->data();                        $updData = array(                            'user_id' => 14,                            'doc_type' => $i,                            'file_name' => $uploadData['file_name'],                            'client_name' => $uploadData['client_name']                        );                        $this->general_model->insert('user_documents', $updData);                    }                }            }        }        $this->template->title("FXPP | Test")                ->set_layout('external/main')                ->build('auth/upload_test');    }    public function getAccountDetails() {//        echo phpinfo();////        $this->load->library('WebService');//        $WebService = new WebService();        /*          $data = array(          'iAccountNumber' => '1010',          'iAccountNumberSpecified' => true,          'serviceId' => '10001',          'serviceIdSpecified' => true,          'servicePassword' => 'Bj4mQBqP'          );         */        $service_data = array(            'address' => '31 St., Triangle Woodville',            'city' => 'Woodville',            'country' => 'RU',            'currency' => 'EUR',            'email' => 'vela.nightclad@gmail.com',            'is_swap_on' => true,            'leverage' => 200,            'name' => 'Vela Nightclad',            'phone_number' => '(07) 3391 5195',            'state' => 'Trial',            'zip_code' => '5585'        );        $rec = FXPP::getUserCity();        var_dump($rec);////        //$account_details = $WebService->request_account_details($data);//        $account_details = $WebService->open_account_live_standard($service_data);//        var_dump($WebService->get_all_result());        //echo $account_details['Email'];//    	$client = new SoapClient('http://136.243.89.90:44360/MT4ApiService.svc?wsdl', array('trace' => 1,//            'exceptions'=> 1,//            'cache_wsdl' => WSDL_CACHE_NONE//        ));//        $name = 'Vela Nightclad';//        $email = 'vela.nightclad@gmail.com';//        $id = '10001';//        $password = 'Bj4mQBqP';//        var_dump($client->RequestAccountDetails($data));    }    //manual generation of unregistered accounts due to API    public function registerNoAccounts() {//        show_404();        $this->load->model('account_model');        $accounts = $this->account_model->getRegisteredNoAccounts('2015-10-20');        foreach ($accounts as $key => $account) {            $phone_password = FXPP::RandomizeCharacter(7);            $service_data = array(                'address' => $account['street'],                'city' => $account['city'],                'country' => $this->general_model->getCountries($account['country']),                'currency' => 'USD',                'email' => $account['email'],                'is_swap_on' => false,                'leverage' => 50, //FXPP-6509 changed from 200                'name' => $account['full_name'],                'phone_number' => $account['phone1'],                'state' => $account['state'],                'zip_code' => $account['zip'],                'phone_password' => $phone_password            );            $webservice_config = array(                'server' => 'live_new'            );            $WebService = new WebService($webservice_config);            $WebService->open_account_live_standard($service_data);            if ($WebService->request_status === 'RET_OK') {                $AccountNumber = $WebService->get_result('LogIn');                $TraderPassword = $WebService->get_result('TraderPassword');                $InvestorPassword = $WebService->get_result('InvestorPassword');//                $RegDate = $WebService->get_result('RegDate');                $RegDate = FXPP::getServerTime();                $mt_account = array(                    'leverage' => '1:50', //FXPP-6509 changed from 1:200                    'amount' => 0,                    'mt_currency_base' => 'USD',                    'mt_account_set_id' => 1,                    'registration_ip' => $_SERVER['REMOTE_ADDR'],                    'registration_time' => date('Y-m-d H:i:s', strtotime($RegDate)),                    'user_id' => $account['id'],                    'mt_type' => 1,                    'swap_free' => 0,                    'account_number' => $AccountNumber,                    'trader_password' => $TraderPassword,                    'investor_password' => $InvestorPassword,                    'phone_password' => $phone_password                );                if ($this->general_model->insert('mt_accounts_set', $mt_account)) {                    $hasher = new PasswordHash(                            $this->config->item('phpass_hash_strength', 'tank_auth'), $this->config->item('phpass_hash_portable', 'tank_auth'));                    $temp_password = FXPP::RandomizeCharacter(7);                    $password = $hasher->HashPassword($temp_password);                    $user = array(                        'password' => $password                    );                    $this->general_model->update('users', 'id', $account['id'], $user);                    $email_data = array(                        'full_name' => $account['full_name'],                        'email' => $account['email'],                        'password' => $temp_password,                        'account_number' => $AccountNumber,                        'trader_password' => $TraderPassword,                        'investor_password' => $InvestorPassword,                        'phone_password' => $phone_password,                    );                    $subject = "ForexMart MT4 Live Trading Account details";                    $config = array(                        'mailtype' => 'html'                    );                    $this->general_model->sendEmail('live-account-html', $subject, $email_data['email'], $email_data, $config);                    $this->dailyCountryReport($account['id']); // sent real time to the email groups                    echo 'Created: ' . $account['email'] . ' => ' . $AccountNumber;                } else {                    echo 'Failed: ' . $account['email'];                }            } else {                echo 'API Failed[' . $WebService->request_status . ']: ' . $account['email'] . ' -> ' . var_dump($service_data) . '<br/>';            }        }    }    public function emailNoAccounts() {//        show_404();        $from_account_number = 103174;        $to_account_number = 103174;//        $account_numbers = array(101596, 102616, 101542);        $account_numbers = array(102066);        $this->load->model('account_model');//        $accounts = $this->account_model->getEmailNoAccounts($from_account_number, $to_account_number);        $accounts = $this->account_model->getEmailNoAccountsByAccounts($account_numbers);        foreach ($accounts as $key => $account) {////            $hasher = new PasswordHash(//                $this->config->item('phpass_hash_strength', 'tank_auth'),//                $this->config->item('phpass_hash_portable', 'tank_auth'));//            $temp_password = FXPP::RandomizeCharacter(7);//            $password = $hasher->HashPassword($temp_password);//            $user = array(//                'password' => $password//            );//            $this->general_model->update('users', 'id', $account['user_id'], $user);            $forgotpass = array(                'Email' => $account['email'],                'Hash' => FXPP::generateGUIDForgotPassword(21),                'Account_number' => $account['account_number'],                'user_id' => $account['user_id'],                'is_admin' => 0,            );            $this->general_model->insert("user_forgot_password", $forgotpass);            $email_data = array(                'full_name' => $account['full_name'],                'email' => $account['email'],                'hash_reset_password' => $forgotpass['Hash'],                'account_number' => $account['account_number'],                'trader_password' => $account['trader_password'],                'investor_password' => $account['investor_password'],                'phone_password' => $account['phone_password'],            );            $subject = lang('liv_acc_htm_00'); // "ForexMart MT4 Live Trading Account details";            $config = array(                'mailtype' => 'html'            );            $this->general_model->sendBCCEmail('live-resend-account-html', $subject, $email_data['email'], $email_data, $config);            echo 'Emailed: ' . $account['email'] . ' => ' . $account['account_number'] . '<br/>';        }    }    public function updateAccountDetails() {        $from_account_number = 103174;        $to_account_number = 103174;        $this->load->model('account_model');        $accounts = $this->account_model->getEmailNoAccounts($from_account_number, $to_account_number);        foreach ($accounts as $key => $account) {            $webservice_config = array(                'server' => 'live_new'            );            $WebService = new WebService($webservice_config);            $data = array(                'iLogin' => $account['account_number']            );            $WebService->request_account_details($data);            if ($WebService->request_status === 'RET_OK') {                $TraderPassword = $WebService->get_result('TraderPassword');                $InvestorPassword = $WebService->get_result('InvestorPassword');                $account_data = array(                    'trader_password' => $TraderPassword,                    'investor_password' => $InvestorPassword                );//                $hasher = new PasswordHash(//                    $this->config->item('phpass_hash_strength', 'tank_auth'),//                    $this->config->item('phpass_hash_portable', 'tank_auth'));//                $temp_password = FXPP::RandomizeCharacter(7);//                $password = $hasher->HashPassword($temp_password);//                $user = array(//                    'password' => $password//                );                if ($this->account_model->updateAccountByUserId($account['user_id'], $account_data)) {                    echo 'Updated [' . $account['user_id'] . '] ' . $account['account_number'] . '[' . $TraderPassword . '][' . $InvestorPassword . ']<br/>';                    //$this->general_model->update('users', 'id', $account['user_id'], $user);                    $email_data = array(                        'full_name' => $account['full_name'],                        'email' => $account['email'],//                        'password'=> $temp_password,                        'account_number' => $account['account_number'],                        'trader_password' => $account['trader_password'],                        'investor_password' => $account['investor_password'],                        'phone_password' => $account['phone_password'],                    );                    $subject = lang('liv_acc_htm_00'); //"ForexMart MT4 Live Trading Account details";                    $config = array(                        'mailtype' => 'html'                    );                    $this->general_model->sendEmail('live-account-html', $subject, $email_data['email'], $email_data, $config);                } else {                    echo 'Failed Update ' . $account['account_number'] . '<br/>';                }            } else {                echo 'Failed API ' . $account['account_number'] . '<br/>';            }        }    }    public function checkAffiliateCode() {//        echo 'test';exit;        if ($this->input->is_ajax_request()) {            $this->form_validation->set_rules('affiliate_code', 'Referral Code', 'trim|required');            if ($this->form_validation->run() == true) {                $affiliate_code = $this->input->post('affiliate_code', true);                $this->load->model('account_model');                $getAccountNumberByAffiliateCode = $this->account_model->getAccountNumberByCode($affiliate_code);                if ($getAccountNumberByAffiliateCode) {                    // Invite friend status update                    $inv_ref = $affiliate_code;                    $email_user = $this->session->userdata('email_live');                    $this->load->model('invite_model');                    $inviter_affiliate_code = $this->invite_model->getInvitedAffiliateCode($email_user);                    if ($inv_ref != $inviter_affiliate_code) {                        $invite_data = array(                            'status' => 7,                            'bonus_status' => 7                        );                        $this->account_model->updateUserDetails('invite_friends', 'email', $email_user, $invite_data);                    }                    // end invite friend status update                    $error = false;                } else {                    $error = true;                    $message = "Please enter valid code.";                }            } else {                $error = true;                $message = form_error('affiliate_code');            }            $data = array(                'error' => $error,                'message' => $message            );            echo json_encode($data);        }    }    public function updateDemoBalance() {        $this->load->model('account_model');        $accounts = $this->account_model->getAccountsByType(0);        foreach ($accounts as $key => $value) {            $webservice_config = array(                'server' => 'demo_new'            );            $WebService = new WebService($webservice_config);            $WebService->request_demo_account_balance($value['account_number']);            if ($WebService->request_status === 'RET_OK') {                $AccountBalance = $WebService->get_result('Balance');                if ($AccountBalance == 0) {                    $WebService2 = new WebService($webservice_config);                    $WebService2->update_demo_deposit_balance($value['account_number'], $value['amount']);                    if ($WebService2->request_status === 'RET_OK') {                        echo $value['account_number'] . ': ' . $value['amount'] . ' - ' . $AccountBalance . '<br/>';                    }                }            }        }    }    public function test() {        $this->load->model('account_model');        $accounts = $this->account_model->getAccountsByUserId(9156);        foreach ($accounts as $key => $account) {            echo ((!isset($account['mt_status']) || trim($account['mt_status']) === '')) ? "Read only" : "Verified";            echo '<br/>';        }    }    public function test2() {        echo 'test2';    }    public function thirty_percent_bonus_promo() {        $this->load->library('IPLoc', null);//          if(!IPLoc::WhitelistPIPCandCC()){//          redirect(FXPP::loc_url(''));//          }        $this->form_validation->set_rules('email', 'Email', 'trim|valid_email|required|xss_clean');        $this->form_validation->set_rules('full_name', 'Full name', 'trim|required|xss_clean');        $this->form_validation->set_rules('mt_currency_base', 'Account Currency', 'required');        if ($this->form_validation->run()) {            $login_type = 0; //login_type 0 = client user / 1 = partner user            $use_username = $this->config->item('use_username', 'tank_auth');            $email_activation = $this->config->item('email_activation', 'tank_auth');            $password = $this->autoPassword(8);            $email = $this->form_validation->set_value('email');            $full_name = $this->form_validation->set_value('full_name');            $currency = $this->form_validation->set_value('mt_currency_base');            $user_inser_data = $this->tank_auth->create_user(                    $use_username ? $this->form_validation->set_value('username') : '', $email, $password, $email_activation, 1, $login_type);            $user_id = $user_inser_data['user_id'];            $user_data = array(                'user_id' => $user_id,            );            $this->session->set_userdata($user_data);            $profile = array(                'full_name' => $full_name,                'user_id' => $user_id,                'country' => '',                'street' => '',                'city' => '',                'state' => '',                'zip' => '',                'dob' => ''            );            $this->general_model->insert('user_profiles', $profile); // Insert into user profile data.            $swap_free = 0;            $phone_password = FXPP::RandomizeCharacter(7);            if (IPLoc::isChinaIP() || $this->country_code == 'CN' || FXPP::html_url() == 'zh') {                $this->session->set_userdata('isChina', '1');            }            $groupCurrency = $this->general_model->getGroupCurrency(1, $currency, $swap_free);            $affiliate_referral_codes = ':' . str_replace('-', ':', $this->input->cookie('forexmart_affiliate_logs'));            $service_data = array(                'address' => '',                'city' => '',                'country' => '',                'email' => $email,                'group' => $groupCurrency . '1',                'leverage' => count($ex_leverage = explode(":", '1:50')) > 1 ? $ex_leverage[1] : '1:50', //FXPP-6509 changed from 1:200                'name' => $full_name,                'phone_number' => '',                'state' => '',                'zip_code' => '',                'phone_password' => $phone_password,                'comment' => strtolower(FXPP::html_url()) . ':' . $this->input->ip_address() . $affiliate_referral_codes            );            $webservice_config = array(                'server' => 'live_new'            );            $WebService = new WebService($webservice_config);            $WebService->open_account_standard($service_data);            if ($WebService->request_status === 'RET_OK') {                $AccountNumber = $WebService->get_result('LogIn');                $TraderPassword = $WebService->get_result('TraderPassword');                $InvestorPassword = $WebService->get_result('InvestorPassword');//                 $RegDate = $WebService->get_result('RegDate');                $RegDate = FXPP::getServerTime();                $mt_account = array(                    'leverage' => '1:50', //FXPP-6509 changed from 1:200                    'amount' => '',                    'mt_currency_base' => $currency,                    'mt_account_set_id' => 1,                    'registration_ip' => $_SERVER['REMOTE_ADDR'],                    'registration_time' => date('Y-m-d H:i:s', strtotime($RegDate)),                    'user_id' => $user_id,                    'mt_type' => 1,                    'swap_free' => $swap_free,                    'account_number' => $AccountNumber,                    'trader_password' => $TraderPassword,                    'investor_password' => $InvestorPassword,                    'phone_password' => $phone_password                );                $this->general_model->insert('mt_accounts_set', $mt_account);                // Save Affiliate Link                $generateAffiliateCode = FXPP::GenerateRandomAffiliateCode();                $affiliate_code_data = array(                    'users_id' => $user_id,                    'affiliate_code' => $generateAffiliateCode                );                $this->general_model->insert('users_affiliate_code', $affiliate_code_data);                $forexmart_affiliate = $this->input->cookie('forexmart_affiliate');                if (!empty($forexmart_affiliate)) {                    $this->load->model('account_model');                    $getAccountNumberByAffiliateCode = $this->account_model->getAccountNumberByCode($forexmart_affiliate);                    $AgentAccountNumber = $getAccountNumberByAffiliateCode['account_number'];                    if (!empty($AgentAccountNumber)) {                        $service_data2 = array(                            'AccountNumber' => $AccountNumber,                            'AgentAccountNumber' => $AgentAccountNumber                        );                        $WebService2 = new WebService($webservice_config);                        $WebService2->SetAccountAgent($service_data2);                        if ($WebService2->request_status === 'RET_OK') {                            $referral_data = array(                                'referral_affiliate_code' => $forexmart_affiliate                            );                            $this->account_model->updateUserDetails('users_affiliate_code', 'users_id', $user_id, $referral_data);                        }                        $getCookieLogs = $this->input->cookie('forexmart_affiliate_logs');                        $getCookieLogs = str_replace("-", " : ", $getCookieLogs);                        $save_affiliate_logs = array(                            'Affiliate_link_logs' => $getCookieLogs,                            'Account_number' => $AccountNumber,                            'User_id' => $user_id,                            'Page' => 'thirty_percent_bonus_promo'                        );                        $this->general_model->insert('users_affiliate_link_logs', $save_affiliate_logs);                        delete_cookie("affiliate_logs");                    }                }                // End Affiliate Link            } else {                $mt_account = array(                    'leverage' => '1:50', //FXPP-6509 changed from 1:200                    'amount' => '',                    'mt_currency_base' => $currency,                    'mt_account_set_id' => 1,                    'registration_ip' => $_SERVER['REMOTE_ADDR'],                    'registration_time' => FXPP::getServerTime(),                    'user_id' => $user_id,                    'mt_type' => 1,                    'swap_free' => $swap_free,                    'account_number' => '',                    'trader_password' => '',                    'investor_password' => '',                    'phone_password' => $phone_password                );                $this->general_model->insert('mt_accounts_set', $mt_account);            }            $trading_experience = array(                'investment_knowledge' => '',                'risk' => '',                'experience' => '',                'user_id' => $user_id,                'technical_analysis' => '',                'trade_duration' => '',            );            $this->general_model->insert('trading_experience', $trading_experience);            $contacts_data = array(                'phone1' => '',                'user_id' => $user_id            );            $this->general_model->insert('contacts', $contacts_data);            // send email  to user email            $email_data = array(                'full_name' => $full_name,                'email' => $email,                'password' => $password,                'account_number' => $mt_account['account_number'],                'trader_password' => $mt_account['trader_password'],                'investor_password' => $mt_account['investor_password'],                'phone_password' => $mt_account['phone_password'],            );            $subject = lang('liv_acc_htm_00'); //  "ForexMart MT4 Live Trading Account details";            $config = array(                'mailtype' => 'html'            );            $this->general_model->sendEmail('live-account-html', $subject, $email_data['email'], $email_data, $config);            $this->dailyCountryReport($user_id); // sent real time to the email groups            $this->session->set_flashdata('message', 'done');            redirect(FXPP::loc_url('thirty-percent-bonus-promo'));        }        $data['data']['account_currency_base'] = $this->general_model->selectOptionList($this->general_model->getAccountCurrencyBase(), 'EUR');        $data['data']['metadata_description'] = '';        $data['data']['metadata_keyword'] = 'Forex bonus';        $illicit_country = unserialize(ILLICIT_COUNTRIES);        $data['data']['allowed_country'] = true;        if (in_array(strtoupper(trim($this->country_code)), $illicit_country)) {            $data['data']['allowed_country'] = false;        }        /* $this->template->title("30&#37; Bonus  | Forexmart")          ->set_layout('external/main')          ->build('external_thirty_percent_bonus_promo', $data['data']); */        $this->load->view("external_thirty_percent_bonus_promo", $data['data']);    }    function test_input($data) {        $data = trim($data);        $data = stripslashes($data);        $data = htmlspecialchars($data);        return $data;    }    public function landingRgistration() {        $this->load->library('IPLoc', null);        if (!IPLoc::WhitelistPIPCandCC()) {            redirect(FXPP::loc_url(''));        }        $this->form_validation->set_rules('email', 'Email', 'trim|valid_email|required|xss_clean');        $this->form_validation->set_rules('full_name', 'Full name', 'trim|required|xss_clean');        $this->form_validation->set_rules('condition', 'Agree with conditions', 'required');        if ($this->form_validation->run()) {            $login_type = 0; //login_type 0 = client user / 1 = partner user            $use_username = $this->config->item('use_username', 'tank_auth');            $email_activation = $this->config->item('email_activation', 'tank_auth');            $password = $this->autoPassword(8);            $email = $this->form_validation->set_value('email');            $full_name = $this->form_validation->set_value('full_name');            $email = $this->test_input($email);            $full_name = $this->test_input($full_name);            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {                echo 405;            } else {                $whereData = array('countryCode' => $this->country_code);                $conndata = $this->general_model->getQueryStringRow('country_to_courrency', '*', $whereData);                if ($conndata->currencyCode != 'EUR' and $conndata->currencyCode != 'GBP' and $conndata->currencyCode != 'RUB') {                    $currency = 'USD';                } else {                    $currency = $conndata->currencyCode;                }                $user_inser_data = $this->tank_auth->create_user(                        $use_username ? $this->form_validation->set_value('username') : '', $email, $password, $email_activation, 1, $login_type);                $user_id = $user_inser_data['user_id'];                $user_data = array(                    'user_id' => $user_id,                );                $this->session->set_userdata($user_data);                $profile = array(                    'full_name' => $full_name,                    'user_id' => $user_id,                    'country' => $this->country_code,                    'street' => '',                    'city' => '',                    'state' => '',                    'zip' => '',                    'dob' => ''                );                $this->general_model->insert('user_profiles', $profile); // Insert into user profile data.                $swap_free = 0;                $phone_password = FXPP::RandomizeCharacter(7);                if (IPLoc::isChinaIP() || $this->country_code == 'CN' || FXPP::html_url() == 'zh') {                    $this->session->set_userdata('isChina', '1');                }                $groupCurrency = $this->general_model->getGroupCurrency(1, $currency, $swap_free);                $service_data = array(                    'address' => '',                    'city' => '',                    'country' => $this->country_code,                    'email' => $email,                    'group' => $groupCurrency . '1',                    'leverage' => count($ex_leverage = explode(":", '1:50')) > 1 ? $ex_leverage[1] : '1:50', //FXPP-6509 changed from 1;200                    'name' => $full_name,                    'phone_number' => '',                    'state' => '',                    'zip_code' => '',                    'phone_password' => $phone_password                );                $webservice_config = array(                    'server' => 'live_new'                );                $WebService = new WebService($webservice_config);                $WebService->open_account_standard($service_data);                if ($WebService->request_status === 'RET_OK') {                    $AccountNumber = $WebService->get_result('LogIn');                    $TraderPassword = $WebService->get_result('TraderPassword');                    $InvestorPassword = $WebService->get_result('InvestorPassword');//                        $RegDate = $WebService->get_result('RegDate');                    $RegDate = FXPP::getServerTime();                    $mt_account = array(                        'leverage' => '1:50', //FXPP-6509 changed from 1:200                        'amount' => '',                        'mt_currency_base' => $currency,                        'mt_account_set_id' => 1,                        'registration_ip' => $_SERVER['REMOTE_ADDR'],                        'registration_time' => date('Y-m-d H:i:s', strtotime($RegDate)),                        'user_id' => $user_id,                        'mt_type' => 1,                        'swap_free' => $swap_free,                        'account_number' => $AccountNumber,                        'trader_password' => $TraderPassword,                        'investor_password' => $InvestorPassword,                        'phone_password' => $phone_password                    );                    $this->general_model->insert('mt_accounts_set', $mt_account);                } else {                    $mt_account = array(                        'leverage' => '1:50', //FXPP-6509 changed from 1:200                        'amount' => '',                        'mt_currency_base' => $currency,                        'mt_account_set_id' => 1,                        'registration_ip' => $_SERVER['REMOTE_ADDR'],                        'registration_time' => FXPP::getServerTime(),                        'user_id' => $user_id,                        'mt_type' => 1,                        'swap_free' => $swap_free,                        'account_number' => '',                        'trader_password' => '',                        'investor_password' => '',                        'phone_password' => $phone_password                    );                    $this->general_model->insert('mt_accounts_set', $mt_account);                }                $trading_experience = array(                    'investment_knowledge' => '',                    'risk' => '',                    'experience' => '',                    'user_id' => $user_id,                    'technical_analysis' => '',                    'trade_duration' => '',                );                $this->general_model->insert('trading_experience', $trading_experience);                $contacts_data = array(                    'phone1' => '',                    'user_id' => $user_id                );                $this->general_model->insert('contacts', $contacts_data);                // send email  to user email                $email_data = array(                    'full_name' => $full_name,                    'email' => $email,                    'password' => $password,                    'account_number' => $mt_account['account_number'],                    'trader_password' => $mt_account['trader_password'],                    'investor_password' => $mt_account['investor_password'],                    'phone_password' => $mt_account['phone_password'],                );                $subject = $subject = lang('liv_acc_htm_00'); //  "ForexMart MT4 Live Trading Account details";                $config = array(                    'mailtype' => 'html'                );                $this->general_model->sendEmail('live-account-html', $subject, $email_data['email'], $email_data, $config);                $this->dailyCountryReport($user_id); // sent real time to the email groups            }        } else {            echo 404;        }    }    public function dailyCountryReport($user_id) {        $this->load->model('account_model');        $this->load->model('general_model');        if ($row = $insert_data['client_country'] = $this->account_model->getClientInfoByUserId($user_id)) {            $c_code = $row[0]->country;            $insert_data['country'] = $this->general_model->getCountries();            $insert_data['country']["GB','IE"] = "UK and Ireland ";            $insert_data['country']["AT','DE"] = "Austria and Germany ";            $insert_data['country']["AM','BY','KZ','KG','MD','RU','TJ','TM','UA"] = "Russia and CIS";            $to_email = array(                "ES" => 'clients_spain_daily_1@forexmart.com',                "AT" => 'clients_germany_daily_1@forexmart.com',                "DE" => 'clients_germany_daily_1@forexmart.com',                "FR" => 'clients_france_daily_1@forexmart.com',                "GB" => 'clients_ukireland_daily_1@forexmart.com',                "IE" => 'clients_ukireland_daily_1@forexmart.com',                "BG" => 'clients_bulgaria_daily_1@Forexmart.com',                "CA" => 'clients_ukireland_daily_1@forexmart.com',                "NL" => 'clients_ukireland_daily_1@forexmart.com',                "AM" => 'clients_russia_daily_1@forexmart.com',                "BY" => 'clients_russia_daily_1@forexmart.com',                "KZ" => 'clients_russia_daily_1@forexmart.com',                "KG" => 'clients_russia_daily_1@forexmart.com',                "MD" => 'clients_russia_daily_1@forexmart.com',                "RU" => 'clients_russia_daily_1@forexmart.com',                "TJ" => 'clients_russia_daily_1@forexmart.com',                "TM" => 'clients_russia_daily_1@forexmart.com',                "UA" => 'clients_russia_daily_1@forexmart.com',                "UZ" => 'clients_russia_daily_1@forexmart.com',                "PL" => 'clients_poland_daily_1@forexmart.com',                "SK" => 'clients_czech.slovak_daily_1@forexmart.com',                "CZ" => 'clients_czech.slovak_daily_1@forexmart.com',                "IN" => "clients_india_daily_1@forexmart.com",                "PK" => "clients_pakistan_daily_1@forexmart.com",                "CF" => "clients_africa_daily_1@forexmart.com",                "JM" => "clients_jamaica_daily_1@forexmart.com",                "AU" => "clients_australia_daily_1@forexmart.com",                "NZ" => "clients_australia_daily_1@forexmart.com",                "MT" => "clients_malta_daily_1@forexmart.com",                "SG" => "clients_singapore_daily_1@forexmart.com",                "UZ" => "clients_uzbekistan_daily_1@forexmart.com",                "TN" => "clients_france_daily_1@forexmart.com",                "MA" => "clients_france_daily_1@forexmart.com",                "MD" => "clients_moldavia_daily_1@forexmart.com",                "RO" => "clients_romania_daily_1@forexmart.com",                "MY" => "clients_malaysia_daily_1@forexmart.com",                "BR" => "clients_pt_br_daily_1@forexmart.com",                "PT" => "clients_pt_br_daily_1@forexmart.com"            );            // $insert_data['email'] = "fin-stats@forexmart.com";            // $insert_data['email'] = "moniruzzaman-it@itgrowtech.com,bug.fxpp@gmail.com";            if (isset($to_email[$c_code])) {                if ($to_email[$c_code] == "clients_russia_daily_1@forexmart.com") {                    /* if ($this->account_model->getCISRegPerDay() % 2 == 0) {                      $insert_data['email'] = "clients_russia_daily_1@forexmart.com";                      } else {                      $insert_data['email'] = "clients_russia_daily_2@forexmart.com";                      } */                    if ($exGroup = $this->general_model->where("cis_group_mail", array('email' => $row[0]->email))) {                        $insert_data['email'] = "clients_russia_daily_" . $exGroup->row()->group_id . "@forexmart.com";                        $this->general_model->insertmy('cis_group_mail_list', array('account_number' => $row[0]->account_number, 'group_id' => $exGroup->row()->group_id));                    } else {                        $val = $this->account_model->getCISRegPerDay() % 5;                        if ($val == 0) {                            $insert_data['email'] = "clients_russia_daily_5@forexmart.com";                            $this->general_model->insertmy('cis_group_mail', array('email' => $row[0]->email, 'group_id' => 5));                            $this->general_model->insertmy('cis_group_mail_list', array('account_number' => $row[0]->account_number, 'group_id' => 5));                        } else {                            $insert_data['email'] = "clients_russia_daily_" . $val . "@forexmart.com";                            $this->general_model->insertmy('cis_group_mail', array('email' => $row[0]->email, 'group_id' => $val));                            $this->general_model->insertmy('cis_group_mail_list', array('account_number' => $row[0]->account_number, 'group_id' => $val));                        }                        /* if ($this->account_model->getCISRegPerDay() % 2 == 0) {                          $insert_data['email'] = "clients_russia_daily_1@forexmart.com";                          $this->general_model->insertmy('cis_group_mail',array('email'=>$row[0]->email,'group_id'=>1));                          } else {                          $insert_data['email'] = "clients_russia_daily_2@forexmart.com";                          $this->general_model->insertmy('cis_group_mail',array('email'=>$row[0]->email,'group_id'=>2));                          } */                    }                } else {                    $insert_data['email'] = $to_email[$c_code];                }            } else {                return true;                $insert_data['email'] = "german.pavlyak@forexmart.com,agus@forexmart.com,ildar.sharipov@forexmart.com";            }            $insert_data['subject'] = "Clients from " . $insert_data['country'][$c_code] . " on  " . date('Y-m-d');            $config = array(                'mailtype' => 'html'            );            $this->load->library('email');            if ($config != null) {                $this->email->initialize($config);            }            $this->SMTPDebug = 1;            $this->email->from('noreply@mail.forexmart.com', 'ForexMart');            //  $this->email->reply_to('noreply@mail.forexmart.com', 'ForexMart');            $this->email->to($insert_data['email']);            //  $this->email->to("moniruzzaman-it@itgrowtech.com,bug.fxpp@gmail.com");            if (isset($to_email[$c_code])) {                $this->email->bcc('german.pavlyak@forexmart.com,agus@forexmart.com,ildar.sharipov@forexmart.com,pmtest1@groups.forexmart.com,pptest1@groups.forexmart.com');            } else {                // $insert_data['email'] ="german.pavlyak@forexmart.com,agus@forexmart.com,ildar.sharipov@forexmart.com";                $this->email->bcc('pmtest1@groups.forexmart.com,pptest1@groups.forexmart.com,agus@forexmart.com');            }            $this->email->subject($insert_data['subject']);            $this->email->message($this->load->view('email/realtime_client_report', $insert_data, TRUE));            $this->email->send();        }    }    public function no_deposit_bonus() {        $this->load->library('IPLoc', null);        if (!IPLoc::WhitelistPIPCandCC()) {            // redirect(FXPP::loc_url(''));        }        $this->form_validation->set_rules('email', 'Email', 'trim|valid_email|required|xss_clean');        $this->form_validation->set_rules('full_name', 'Full name', 'trim|required|xss_clean');        $this->form_validation->set_rules('mt_currency_base', 'Account Currency', 'required');        if ($this->form_validation->run()) {            $login_type = 0; //login_type 0 = client user / 1 = partner user            $use_username = $this->config->item('use_username', 'tank_auth');            $email_activation = $this->config->item('email_activation', 'tank_auth');            $password = $this->autoPassword(8);            $email = $this->form_validation->set_value('email');            $full_name = $this->form_validation->set_value('full_name');            $mt_currency_base = $this->form_validation->set_value('mt_currency_base');            $email = $this->test_input($email);            $full_name = $this->test_input($full_name);            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {                echo 405;            } else {                $affiliate_referral_codes = $this->input->cookie('forexmart_affiliate_logs');                $data['data']['code'] = $this->GetCodevalidate(20);                $data['insert'] = array(                    'users_Id' => 0,                    'Fullname' => $full_name,                    'Email' => $email,                    'Code' => $data['data']['code'],                    'Activation' => 0,                    'mt_currency_base' => $mt_currency_base,                    'type' => 'NDB',                    'fb' => $this->input->post('fb', true),                    'Affiliate_code_logs' => $affiliate_referral_codes                );                $data['return_insert'] = $this->g_m->insertmy($table = "forexmart_landing", $data['insert']);                $this->lang->load('FxMailer');                $body = '';                $body .= Fx_mailer::head();                $body .= '<div style="width:100%;float:center;"><h2 style="text-align: center;color: #2988CA;"> ' . $title . '</h2><p class="greetings" style="margin: 0 auto; font-size: 14px; font-family: Arial; font-weight: 400; color: #555">' . lang("hi") . ' ' . $full_name . '</p><p class="letter-body" style="margin: 0 auto; font-size: 14px; font-family: Arial; font-weight: 400; color: #555; margin-top: 15px; text-align: justify; line-height: 19px">' . lang('flrc_01') . '</p><p class="letter-body" style="margin: 0 auto; font-size: 14px; font-family: Arial; font-weight: 400; color: #555; margin-top: 15px; text-align: justify; line-height: 19px">                        <a href="' . FXPP::my_url("client/signin?activate=" . $data['data']['code']) . '"> ' . lang('flrc_02') . '</a></p><br/><p class="last-word" style="margin: 0 auto; font-size: 14px; font-family: Arial; font-weight: 400; color: #555; margin-top: 15px; text-align: justify">                        ' . lang('flrc_03') . '<a style="margin: 0 auto; color: #2988ca; text-decoration: none" href="./#NOP" onclick="return false" rel="noreferrer">   bonuses@forexmart.com </a>.                        </p><p class="closing" style="margin: 0 auto; font-size: 14px; font-family: Arial; font-weight: 400; color: #555; margin-top: 15px; line-height: 19px">' . lang("thankyou") . '<br style="margin: 0 auto">                        ' . lang("closing") . '<br style="margin: 0 auto"><span style="margin: 0 auto; font-weight: 600; color: #2988ca">' . lang("ForexMart") . '</span> ' . lang("team") . '</p></div>';                $body .= Fx_mailer::foot();                $data['insert'] = array(                    'Title' => $title,                    'Fullname' => $full_name,                    'Code' => $data['data']['code'],                    'Email' => $email,                    'Msg' => $body                );                Fx_mailer::Forexmart_Landing_RCode($data['insert']);                $_SESSION['landing_email'] = $email;                // track registration link                $this->load->helpers('url');                $reg_date = FXPP::getServerTime();                $reg_link_details = array(                    'registration_link' => current_full_url(),                    'additional' => $data['data']['code'],                    'date_created' => date('Y-m-d H:i:s', strtotime($reg_date)),                );                $this->general_model->insert('track_registration', $reg_link_details);                redirect('landing/no-deposit-bonus/thanks');            }            $login_type = 0; //login_type 0 = client user / 1 = partner user            $use_username = $this->config->item('use_username', 'tank_auth');            $email_activation = $this->config->item('email_activation', 'tank_auth');            $password = $this->autoPassword(8);            $email = $this->form_validation->set_value('email');            $full_name = $this->form_validation->set_value('full_name');            $currency = $this->form_validation->set_value('mt_currency_base');            $user_inser_data = $this->tank_auth->create_user(                    $use_username ? $this->form_validation->set_value('username') : '', $email, $password, $email_activation, 1, $login_type);            $user_id = $user_inser_data['user_id'];            $user_data = array(                'user_id' => $user_id,            );            $this->session->set_userdata($user_data);            $profile = array(                'full_name' => $full_name,                'user_id' => $user_id,                'country' => '',                'street' => '',                'city' => '',                'state' => '',                'zip' => '',                'dob' => ''            );            $this->general_model->insert('user_profiles', $profile); // Insert into user profile data.            $swap_free = 0;            $phone_password = FXPP::RandomizeCharacter(7);            if (IPLoc::isChinaIP() || $this->country_code == 'CN' || FXPP::html_url() == 'zh') {                $this->session->set_userdata('isChina', '1');            }            $groupCurrency = $this->general_model->getGroupCurrency(1, $currency, $swap_free);            $service_data = array(                'address' => '',                'city' => '',                'country' => '',                'email' => $email,                'group' => $groupCurrency . '1',                'leverage' => count($ex_leverage = explode(":", '1:50')) > 1 ? $ex_leverage[1] : '1:50', //FXPP-6509 changed from 1:200                'name' => $full_name,                'phone_number' => '',                'state' => '',                'zip_code' => '',                'phone_password' => $phone_password            );            $webservice_config = array(                'server' => 'live_new'            );            $WebService = new WebService($webservice_config);            $WebService->open_account_standard($service_data);            if ($WebService->request_status === 'RET_OK') {                $AccountNumber = $WebService->get_result('LogIn');                $TraderPassword = $WebService->get_result('TraderPassword');                $InvestorPassword = $WebService->get_result('InvestorPassword');//                $RegDate = $WebService->get_result('RegDate');                $RegDate = FXPP::getServerTime();                $mt_account = array(                    'leverage' => '1:50', //FXPP-6509 changed from 1:200                    'amount' => '',                    'mt_currency_base' => $currency,                    'mt_account_set_id' => 1,                    'registration_ip' => $_SERVER['REMOTE_ADDR'],                    'registration_time' => date('Y-m-d H:i:s', strtotime($RegDate)),                    'user_id' => $user_id,                    'mt_type' => 1,                    'swap_free' => $swap_free,                    'account_number' => $AccountNumber,                    'trader_password' => $TraderPassword,                    'investor_password' => $InvestorPassword,                    'phone_password' => $phone_password                );                $this->general_model->insert('mt_accounts_set', $mt_account);            } else {                $mt_account = array(                    'leverage' => '1:50', //FXPP-6509 changed from 1:200                    'amount' => '',                    'mt_currency_base' => $currency,                    'mt_account_set_id' => 1,                    'registration_ip' => $_SERVER['REMOTE_ADDR'],                    'registration_time' => FXPP::getServerTime(),                    'user_id' => $user_id,                    'mt_type' => 1,                    'swap_free' => $swap_free,                    'account_number' => '',                    'trader_password' => '',                    'investor_password' => '',                    'phone_password' => $phone_password                );                $this->general_model->insert('mt_accounts_set', $mt_account);            }            $trading_experience = array(                'investment_knowledge' => '',                'risk' => '',                'experience' => '',                'user_id' => $user_id,                'technical_analysis' => '',                'trade_duration' => '',            );            $this->general_model->insert('trading_experience', $trading_experience);            $contacts_data = array(                'phone1' => '',                'user_id' => $user_id            );            $this->general_model->insert('contacts', $contacts_data);            // send email  to user email            $email_data = array(                'full_name' => $full_name,                'email' => $email,                'password' => $password,                'account_number' => $mt_account['account_number'],                'trader_password' => $mt_account['trader_password'],                'investor_password' => $mt_account['investor_password'],                'phone_password' => $mt_account['phone_password'],            );            $subject = "ForexMart MT4 Live Trading Account details";            $config = array(                'mailtype' => 'html'            );            $this->general_model->sendEmail('live-account-html', $subject, $email_data['email'], $email_data, $config);            $this->dailyCountryReport($user_id); // sent real time to the email groups            $this->session->set_flashdata('message', 'done');            redirect(FXPP::loc_url('landing/no-deposit-bonus'));        }        $data['data']['account_currency_base'] = $this->general_model->selectOptionList($this->general_model->getAccountCurrencyBase(), 'EUR');        $this->load->view("external_no_deposit_bonus_landing", $data['data']);    }    public function no_deposit_bonus_promo() {        $this->load->library('IPLoc', null);        if (!IPLoc::WhitelistPIPCandCC()) {            redirect(FXPP::loc_url(''));        }        $this->form_validation->set_rules('email', 'Email', 'trim|valid_email|required|xss_clean');        $this->form_validation->set_rules('full_name', 'Full name', 'trim|required|xss_clean');        $this->form_validation->set_rules('mt_currency_base', 'Account Currency', 'required');        if ($this->form_validation->run()) {            $login_type = 0; //login_type 0 = client user / 1 = partner user            $use_username = $this->config->item('use_username', 'tank_auth');            $email_activation = $this->config->item('email_activation', 'tank_auth');            $password = $this->autoPassword(8);            $email = $this->form_validation->set_value('email');            $full_name = $this->form_validation->set_value('full_name');            $currency = $this->form_validation->set_value('mt_currency_base');            $user_inser_data = $this->tank_auth->create_user(                    $use_username ? $this->form_validation->set_value('username') : '', $email, $password, $email_activation, 1, $login_type);            $user_id = $user_inser_data['user_id'];            $user_data = array(                'user_id' => $user_id,            );            $this->session->set_userdata($user_data);            $profile = array(                'full_name' => $full_name,                'user_id' => $user_id,                'country' => '',                'street' => '',                'city' => '',                'state' => '',                'zip' => '',                'dob' => ''            );            $this->general_model->insert('user_profiles', $profile); // Insert into user profile data.            $swap_free = 0;            $phone_password = FXPP::RandomizeCharacter(7);            if (IPLoc::isChinaIP() || $this->country_code == 'CN' || FXPP::html_url() == 'zh') {                $this->session->set_userdata('isChina', '1');            }            $groupCurrency = $this->general_model->getGroupCurrency(1, $currency, $swap_free);            $service_data = array(                'address' => '',                'city' => '',                'country' => '',                'email' => $email,                'group' => $groupCurrency . '1',                'leverage' => count($ex_leverage = explode(":", '1:50')) > 1 ? $ex_leverage[1] : '1:50', //FXPP-6509 changed from 1:200                'name' => $full_name,                'phone_number' => '',                'state' => '',                'zip_code' => '',                'phone_password' => $phone_password            );            $webservice_config = array(                'server' => 'live_new'            );            $WebService = new WebService($webservice_config);            $WebService->open_account_standard($service_data);            if ($WebService->request_status === 'RET_OK') {                $AccountNumber = $WebService->get_result('LogIn');                $TraderPassword = $WebService->get_result('TraderPassword');                $InvestorPassword = $WebService->get_result('InvestorPassword');//                $RegDate = $WebService->get_result('RegDate');                $RegDate = FXPP::getServerTime();                $mt_account = array(                    'leverage' => '1:50', //FXPP-6509 changed from 1:200                    'amount' => '',                    'mt_currency_base' => $currency,                    'mt_account_set_id' => 1,                    'registration_ip' => $_SERVER['REMOTE_ADDR'],                    'registration_time' => date('Y-m-d H:i:s', strtotime($RegDate)),                    'user_id' => $user_id,                    'mt_type' => 1,                    'swap_free' => $swap_free,                    'account_number' => $AccountNumber,                    'trader_password' => $TraderPassword,                    'investor_password' => $InvestorPassword,                    'phone_password' => $phone_password                );                $this->general_model->insert('mt_accounts_set', $mt_account);            } else {                $mt_account = array(                    'leverage' => '1:50', //FXPP-6509 changed from 1:200                    'amount' => '',                    'mt_currency_base' => $currency,                    'mt_account_set_id' => 1,                    'registration_ip' => $_SERVER['REMOTE_ADDR'],                    'registration_time' => FXPP::getServerTime(),                    'user_id' => $user_id,                    'mt_type' => 1,                    'swap_free' => $swap_free,                    'account_number' => '',                    'trader_password' => '',                    'investor_password' => '',                    'phone_password' => $phone_password                );                $this->general_model->insert('mt_accounts_set', $mt_account);            }            $trading_experience = array(                'investment_knowledge' => '',                'risk' => '',                'experience' => '',                'user_id' => $user_id,                'technical_analysis' => '',                'trade_duration' => '',            );            $this->general_model->insert('trading_experience', $trading_experience);            $contacts_data = array(                'phone1' => '',                'user_id' => $user_id            );            $this->general_model->insert('contacts', $contacts_data);            // send email  to user email            $email_data = array(                'full_name' => $full_name,                'email' => $email,                'password' => $password,                'account_number' => $mt_account['account_number'],                'trader_password' => $mt_account['trader_password'],                'investor_password' => $mt_account['investor_password'],                'phone_password' => $mt_account['phone_password'],            );            $subject = "ForexMart MT4 Live Trading Account details";            $config = array(                'mailtype' => 'html'            );            $this->general_model->sendEmail('live-account-html', $subject, $email_data['email'], $email_data, $config);            $this->session->set_flashdata('message', 'done');            redirect(FXPP::loc_url('no-deposit-bonus-promo'));        }        $data['data']['account_currency_base'] = $this->general_model->selectOptionList($this->general_model->getAccountCurrencyBase(), 'EUR');        $data['data']['metadata_description'] = '';        $data['data']['metadata_keyword'] = 'Forex bonus';        $this->template->title("No Deposit Bonus  | Forexmart")                ->set_layout('external/main')                ->build('external_no_deposit_bonus', $data['data']);    }    public function checkCountryLimit() {        if ($this->input->is_ajax_request()) {            $country = $this->input->post('country', true);            if (in_array(strtoupper($country), array('PL'))) {                $data['leverage_list'] = $this->general_model->selectOptionList($this->general_model->getLeverage(null, 100), isset($user_details['leverage']) ? $user_details['leverage'] : "1:100");            } else {                $data['leverage_list'] = $this->general_model->selectOptionList($this->general_model->getLeverage(), isset($user_details['leverage']) ? $user_details['leverage'] : "1:50"); //FXPP-6509 changed from 1:200            }            $illicit_country = unserialize(ILLICIT_COUNTRIES);            if (in_array(strtoupper(trim($country)), $illicit_country)) {                $data['banned'] = true;            } else {                $data['banned'] = false;            }            $this->output->set_content_type('application/json')->set_output(json_encode($data));        } else {            show_404();        }    }    public function landing_registration() {        if (!$this->input->is_ajax_request()) {            die('Not authorized!');        }        $this->load->library('IPLoc', null);        $this->form_validation->set_rules('email', 'Email', 'trim|valid_email|required|xss_clean|callback_character_check');        $this->form_validation->set_rules('full_name', 'Full name', 'trim|required|xss_clean|callback_character_check');        $this->form_validation->set_rules('condition', 'Agree with conditions', 'required');        if ($this->form_validation->run()) {            $login_type = 0; //login_type 0 = client user / 1 = partner user            $use_username = $this->config->item('use_username', 'tank_auth');            $email_activation = $this->config->item('email_activation', 'tank_auth');            $password = $this->autoPassword(8);            $email = $this->form_validation->set_value('email');            $full_name = $this->form_validation->set_value('full_name');            $type = $this->input->post('type', true);            $type = ($type != "") ? $type : '';            $email = $this->test_input($email);            $full_name = $this->test_input($full_name);            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {                echo 405;            } else {                $data['data']['code'] = $this->GetCodevalidate(20);                // Affiliate Code                $forexmart_affiliate = $this->input->cookie('forexmart_affiliate');                $affiliateCode = empty($forexmart_affiliate) ? '' : $forexmart_affiliate;                $affiliate_referral_codes = $this->input->cookie('forexmart_affiliate_logs');                $data['insert'] = array(                    'users_Id' => 0,                    'Fullname' => $full_name,                    'Email' => $email,                    'Code' => $data['data']['code'],                    'Activation' => 0,                    'type' => $type,                    'Affiliate_code' => $affiliateCode,                    'Affiliate_code_logs' => $affiliate_referral_codes,                );                $data['return_insert'] = $this->g_m->insertmy($table = "forexmart_landing", $data['insert']);                $data['insert'] = array(                    'Title' => 'Confirm your email address',                    'Fullname' => $full_name,                    'Code' => $data['data']['code'],                    'Email' => $email                );                Fx_mailer::Forexmart_Landing_RCode($data['insert']);                $_SESSION['landing_email'] = $email;                $_SESSION['insert_id'] = $data['return_insert'];                // track registration link                $this->load->helpers('url');                $reg_date = FXPP::getServerTime();                $reg_link_details = array(                    'registration_link' => current_full_url(),                    'additional' => $data['data']['code'],                    'date_created' => date('Y-m-d H:i:s', strtotime($reg_date)),                );                $this->general_model->insert('track_registration', $reg_link_details);            }        } else {            echo 404;        }    }    private function GetCodevalidate($length) {        $loopcode = true;        do {            $key = '';            $keys = array_merge(range(0, 9));            for ($i = 0; $i < $length; $i++) {                $key .= $keys[array_rand($keys)];            }            $loopcode = $this->g_m->showlike2($table = 'forexmart_landing', $field = 'Code', $id = $key, $select = "Code");        } while ($loopcode == true);        return $key;    }    public function getAffiliateLogs($input_affiliate_code) {        $getCookieLogs = $this->input->cookie('forexmart_affiliate_logs');        $affiliate_code = $this->input->cookie('forexmart_affiliate');        if (empty($getCookieLogs) and ! empty($affiliate_code)) {            $getCookieLogs = $affiliate_code;        }        if (empty($getCookieLogs)) {            $affiliate_code = $input_affiliate_code;        } else {            $affiliate_code = '-' . $input_affiliate_code;        }        if (!empty($input_affiliate_code)) {            $getCookieLogs = $getCookieLogs . $affiliate_code;        }        return $getCookieLogs;    }    public function character_check($str) {        if (preg_match(Cyrillic::register_page(), $str)) {            $this->form_validation->set_message('character_check', lang('validate_engrus1') . ' %s ' . lang('validate_engrus2'));            return FALSE;        } else {            return TRUE;        }    }    public function isChinaIP() {        require_once APPPATH . '/helpers/geoiploc.php';        $ip = FXPP::CI()->input->ip_address();        if (FXPP::CI()->input->valid_ip($ip)) {            $country = getCountryFromIP($ip);        } else {            $country = 'Invalid';        }        if (strtoupper($country) === 'CN') {            return true;        } else {            return false;        }    }    public function microAccount() {        $_SESSION['isMicro'] = 1;        redirect(FXPP::loc_url('register'));    }    public function monitorReg() {        if (IPLoc::Office()) {            $limit = $this->input->get('limit');            $offset = $this->input->get('off');            $logs = $this->general_model->getReglog(500, 0);//            echo "<pre>";            $data['tbl'] = $logs;//            print_r($tbl);            $this->template->title(lang('x_reg_tit'))                    ->set_layout('external/main')                    ->build('registration_monitoring', $data);        }    }}